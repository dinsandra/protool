{"version":3,"sources":["ProtoConvert.js","LocalStorage.js","view/MessageBuilder.js","view/ProtoLibrary.js","view/Main.js","index.js"],"names":["require","List","Map","protobuf","shortid","objectFromEntries","entries","o","i","length","_entries$i","Object","G_devel_Javascript_protool_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","k","v","converters","binary","messageToBinary","messageFromBinary","binary-hex","messageDescriptor","message","binaryMessage","Array","from","map","b","toString","join","toUpperCase","hexMessage","binaryMessageArray","push","parseInt","substring","Uint8Array","binary-b64","util","base64","encode","base64Message","window","atob","json","protoMessage","messageToProto","JSON","stringify","jsonMessage","fromObject","parse","asUTF8","messageFromProtoMessage","json-camel","camelCaseMessage","replaceFieldNames","toObject","toJSONOptions","fieldName","camelCase","jsonCamelCaseMessage","reverseReplaceFieldNames","camelCaseFieldName","json-id","pbJsonMessage","fields","id","jsonIdsMessage","idsMessage","fieldId","converterFormats","keys","sort","converterName","format","converterExtension","convertTo","finish","replacementFunc","_ref","_ref2","newName","fieldDescriptor","resolvedType","constructor","Type","repeated","value","messageObject","messageToProtoInternal","mapEntries","_ref3","_ref4","key","valueEntries","fieldsById","name","valueEntry","valueToProto","keyType","get","type","toArray","size","valueEntriesToProto","fieldType","console","error","Enum","convertFrom","encodedMessage","decode","data","TextDecoder","convertedMessage","convertFunc","convertedKey","findConvertedKey","options","_ref5","_ref6","_ref7","_ref8","generate","valueFromProto","values","valueEntriesFromProto","protoValue","defaultValueEntryForField","valueObject","defaultValueForFieldType","valuesById","first","fullMessageDescriptorName","parent","fromJS","isKeyed","reviver","slicedToArray","test","tryParseToInt","toMap","toList","loadJson","keyName","localStorage","getItem","log","saveJson","isEmpty","removeItem","setItem","toJSON","LocalStorage","load","save","rawStoredProtos","messages","config","ProtoConvert","MessageBuilderScaffold","handleSelectMessage","_this","props","callbacks","onSet","undefined","this","path","react_default","a","createElement","Fragment","className","MessageBuilder_StoreMessageButton","MessageBuilder_StoredMessageSelector","storedMessages","shouldSet","onSelectMessage","MessageBuilder_MessageFieldsBuilder","MessageBuilder_Output","builtMessage","buildMessageUpToDate","React","Component","StoredMessageSelector","_this2","event","target","getIn","onChange","keySeq","Output","handleExportToFile","_this3","onExport","handleChangeFormat","onSetFormat","handleFileChange","file","files","reader","FileReader","onload","fileData","result","onImport","onerror","err","readAsArrayBuffer","handleImportFromFile","refs","fileuploader","click","handleChangeBuiltMessage","split","defaultValue","onClick","ref","hidden","errorMessage","renderControls","disabled","StoreMessageButton","_this4","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleStartStoring","setState","isStoring","handleCommitStore","storeName","onStore","handleDiscardStore","state","MessageFieldsBuilder","isRegularField","partOf","fieldTypeName","required","_this6","regularFieldDescriptors","filter","oneOfDescriptors","oneofs","regularFieldItems","MessageBuilder_MessageFieldValuesBuilder","concat","oneOfItems","oneOfDescriptor","MessageBuilder_MessageOneOfFieldValuesBuilder","MessageFieldValuesBuilder","_this7","messageFieldValueBuilders","index","MessageBuilder_MessageFieldValueBuilder","numEntries","MessageBuilder_MessageFieldValuesAddControls","numValueEntries","MessageFieldValuesAddControls","handleSet","_this8","onAdd","showSet","showAdd","MessageFieldValueBuilder","handleDelete","_this9","onDelete","handleDuplicate","set","handleMoveUp","onMove","handleMoveDown","showDelete","showDuplicate","showMove","enableMoveDown","enableMoveUp","MessageBuilder_MessageFieldInput","MessageOneOfFieldValuesBuilder","currentFieldDescriptor","maybeCurrentFieldId","_this10","find","newFieldId","newFieldDescriptor","maybeCurrentFieldDescriptor","fieldsArray","MessageFieldInput","MessageBuilder_MessageTextInput","MessageBuilder_MessageBytesInput","MessageBuilder_MessageIntInput","MessageBuilder_MessageFloatInput","MessageBuilder_MessageBoolInput","MessageBuilder_MessageEnumInput","MessageTextInput","handleChange","_this11","MessageBytesInput","isValid","_this12","MessageIntInput","_this13","MessageFloatInput","_this14","MessageBoolInput","_this15","checked","MessageEnumInput","_this16","_this17","ProtoLibrary","ProtoLibrary_ProtoRoot","protoRoot","ProtoLibrary_ProtoFiles","filenames","fileDependencies","ProtoLibrary_ProtoInput","ProtoLibrary_ProtoUpload","ProtoRoot","ProtoLibrary_ProtoNamespace","namespace","ProtoNamespace","handleBuild","onSelectMessageDescriptor","nested","namespaces","Namespace","types","baseName","_namespaces$","subNamespaceName","subNamespace","_types$","subMessageName","subMessage","ProtoLibrary_ProtoMessage","buildable","ProtoMessage","ProtoLibrary_StoredMessages","ProtoFiles","filename","ProtoLibrary_ProtoFile","ProtoFile","handleClick","onRemoveProto","fileDependents","importingFiles","StoredMessages","_this5","ProtoLibrary_StoredMessage","StoredMessage","handleRemove","onRemoveStoredMessage","ProtoInput","handleStartAdding","isAdding","handleFilenameChanged","e","handleProtoContentChanged","protoContent","handleSubmit","fileContents","onValidateProto","onAddProto","readOnly","renderError","ProtoUpload","readFile","Promise","resolve","reject","text","readAsText","all","toJS","then","multiple","FileSaver","loadStoredProtos","isNode","fs","readFileSync","storedProto","Error","Root","loadSync","keepCase","flatMap","imports","importName","groupBy","importNameAndFilenames","toSet","resolveAll","Main","isNightModeEnabled","handleToggleNightMode","handleAddProto","newFileContents","contents","mergeDeep","_loadStoredProtos","handleRemoveProto","fileName","delete","_loadStoredProtos2","handleValidateProto","handleSelectMessageDescriptor","messageBuildTimer","handleSetFormat","handleExportMessage","kind","extension","blob","Blob","saveAs","handleImportMessage","handleAddToMessage","updateIn","arguments","scheduleBuildMessage","handleDeleteFromMessage","listPath","pop","listKey","last","messagePath","deleteIn","handleSetInMessage","setIn","handleMoveInMessage","fromIndex","toIndex","list","movedEntry","insert","handleStoreMessage","rawStoredMessages","handleRemoveStoredMessage","prevTimeout","clearTimeout","setTimeout","libraryCallbacks","messageBuilderCallbacks","_loadStoredProtos3","prevProps","prevState","view_ProtoLibrary","MessageBuilder","ReactDOM","render","view_Main","document","getElementById"],"mappings":"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","file":"static/js/main.5619d911.chunk.js","sourcesContent":["const { List, Map } = require('immutable');\r\nconst protobuf = require(\"protobufjs\");\r\nconst shortid = require('shortid');\r\n\r\nfunction objectFromEntries(entries) {\r\n  var o = {};\r\n  for (var i = 0; i < entries.length; ++i) {\r\n    const [k, v] = entries[i];\r\n    o[k] = v\r\n  }\r\n  return o;\r\n}\r\n\r\nconst converters = {\r\n  'binary': ['Binary', 'pbdata', messageToBinary, messageFromBinary],\r\n  'binary-hex': ['Binary (hex)', 'pbdata.hex', messageToBinaryHex, messageFromBinaryHex],\r\n  'binary-b64': ['Binary (base64)', 'pbdata.b64', messageToBinaryBase64, messageFromBinaryBase64],\r\n  'json': ['Json', 'json', messageToJson, messageFromJson],\r\n  'json-camel': ['Json (camelCase)', 'cc.json', messageToJsonCamelCase, messageFromJsonCamelCase],\r\n  'json-id': ['Json (field-IDs)', 'ids.json', messageToJsonIds, messageFromJsonIds],\r\n};\r\n\r\nconst converterFormats = Object.keys(converters).sort();\r\n\r\nfunction converterName(format) {\r\n  return converters[format][0];\r\n}\r\n\r\nfunction converterExtension(format) {\r\n  return converters[format][1];\r\n}\r\n\r\nfunction convertTo(format, messageDescriptor, message) {\r\n  return converters[format][2](messageDescriptor, message);\r\n}\r\n\r\nfunction messageToBinary(messageDescriptor, message) {\r\n  const protoMessage = messageToProto(messageDescriptor, message);\r\n  return messageDescriptor.encode(protoMessage).finish();\r\n}\r\n\r\nfunction messageToBinaryHex(messageDescriptor, message) {\r\n  const binaryMessage = messageToBinary(messageDescriptor, message);\r\n  const hex = Array.from(binaryMessage).map((b) =>\r\n    ((b < 0x10) ? '0' : '') + b.toString(16)\r\n  );\r\n  return hex.join('').toUpperCase();\r\n}\r\n\r\nfunction messageToBinaryBase64(messageDescriptor, message) {\r\n  const binaryMessage = messageToBinary(messageDescriptor, message);\r\n  return protobuf.util.base64.encode(binaryMessage, 0, binaryMessage.length);\r\n}\r\n\r\nfunction messageToJson(messageDescriptor, message) {\r\n  const protoMessage = messageToProto(messageDescriptor, message);\r\n  return JSON.stringify(protoMessage);\r\n}\r\n\r\nfunction messageToJsonCamelCase(messageDescriptor, message) {\r\n  const protoMessage = messageToProto(messageDescriptor, message);\r\n  const camelCaseMessage = replaceFieldNames(\r\n    messageDescriptor,\r\n    messageDescriptor.toObject(protoMessage, protobuf.util.toJSONOptions),\r\n    (fieldName) => protobuf.util.camelCase(fieldName)\r\n  );\r\n  return JSON.stringify(camelCaseMessage);\r\n}\r\n\r\nfunction messageToJsonIds(messageDescriptor, message) {\r\n  const protoMessage = messageToProto(messageDescriptor, message);\r\n  const pbJsonMessage = replaceFieldNames(\r\n    messageDescriptor,\r\n    messageDescriptor.toObject(protoMessage, protobuf.util.toJSONOptions),\r\n    (fieldName, messageDescriptor) => messageDescriptor.fields[fieldName].id);\r\n  return JSON.stringify(pbJsonMessage);\r\n}\r\n\r\nfunction replaceFieldNames(messageDescriptor, protoMessage, replacementFunc) {\r\n  return objectFromEntries(Object.entries(protoMessage).map(([k, v]) => {\r\n    const newName = replacementFunc(k, messageDescriptor);\r\n    const fieldDescriptor = messageDescriptor.fields[k] || messageDescriptor.fields[newName];\r\n\r\n    if (fieldDescriptor.resolvedType && fieldDescriptor.resolvedType.constructor === protobuf.Type) {\r\n      if (fieldDescriptor.repeated) {\r\n        return [\r\n          newName,\r\n          v.map((value) => replaceFieldNames(fieldDescriptor.resolvedType, value, replacementFunc))\r\n        ];\r\n      } else {\r\n        return [newName, replaceFieldNames(fieldDescriptor.resolvedType, v, replacementFunc)];\r\n      }\r\n    } else {\r\n      return [newName, v];\r\n    }\r\n  }));\r\n}\r\n\r\nfunction messageToProto(messageDescriptor, message) {\r\n  const messageObject = messageToProtoInternal(messageDescriptor, message);\r\n  return messageDescriptor.fromObject(messageObject);\r\n}\r\n\r\nfunction messageToProtoInternal(messageDescriptor, message) {\r\n  return message.mapEntries(([key, valueEntries]) => {\r\n    const fieldDescriptor = messageDescriptor.fieldsById[key];\r\n    return [fieldDescriptor.name, valueEntriesToProto(fieldDescriptor, valueEntries)];\r\n  }).toObject();\r\n}\r\n\r\nfunction valueEntriesToProto(fieldDescriptor, valueEntries) {\r\n  if (fieldDescriptor.map) {\r\n    return objectFromEntries(valueEntries.map(valueEntry => [\r\n      valueToProto(fieldDescriptor.keyType, null, valueEntry.get('key')),\r\n      valueToProto(fieldDescriptor.type, fieldDescriptor.resolvedType, valueEntry.get('value')),\r\n    ]).toArray());\r\n  } else if (fieldDescriptor.repeated) {\r\n    return valueEntries.map(valueEntry =>\r\n      valueToProto(fieldDescriptor.type, fieldDescriptor.resolvedType, valueEntry.get('value'))\r\n    ).toArray();\r\n  } else if (valueEntries.size === 1) {\r\n    return valueToProto(fieldDescriptor.type, fieldDescriptor.resolvedType, valueEntries.get(0).get('value'));\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction valueToProto(fieldType, resolvedType, value) {\r\n  switch (fieldType) {\r\n    case \"string\":\r\n    case \"bytes\":\r\n    case \"int32\":\r\n    case \"int64\":\r\n    case \"sint32\":\r\n    case \"sint64\":\r\n    case \"uint32\":\r\n    case \"uint64\":\r\n    case \"fixed32\":\r\n    case \"fixed64\":\r\n    case \"float\":\r\n    case \"double\":\r\n    case \"bool\":\r\n      return value;\r\n    default:\r\n      break;\r\n  }\r\n  if (resolvedType === null) {\r\n    console.error(\"Unhandled value type\", fieldType);\r\n    return \"\";\r\n  }\r\n  if (resolvedType.constructor === protobuf.Enum) {\r\n    return value;\r\n  } else if (resolvedType.constructor === protobuf.Type) {\r\n    return messageToProtoInternal(resolvedType, value);\r\n  }\r\n  console.error(\"Unhandled value type\", fieldType);\r\n  return \"\";\r\n}\r\n\r\nfunction convertFrom(format, messageDescriptor, encodedMessage) {\r\n  return converters[format][3](messageDescriptor, encodedMessage);\r\n}\r\n\r\nfunction messageFromBinary(messageDescriptor, binaryMessage) {\r\n  const protoMessage = messageDescriptor.decode(binaryMessage);\r\n  return messageFromProtoMessage(messageDescriptor, protoMessage);\r\n}\r\n\r\nfunction messageFromBinaryHex(messageDescriptor, hexMessage) {\r\n  const binaryMessageArray = []\r\n  for (var i = 0; i < hexMessage.length; i += 2) {\r\n    binaryMessageArray.push(parseInt(hexMessage.substring(i, i + 2), 16));\r\n  }\r\n  return messageFromBinary(messageDescriptor, new Uint8Array(binaryMessageArray));\r\n}\r\n\r\nfunction messageFromBinaryBase64(messageDescriptor, base64Message) {\r\n  const binaryMessage = window.atob(base64Message);\r\n  return messageFromBinary(messageDescriptor, binaryMessage);\r\n}\r\n\r\nfunction asUTF8(data) {\r\n  if (data instanceof Uint8Array) {\r\n    return new TextDecoder('utf-8').decode(data);\r\n  } else {\r\n    return data;\r\n  }\r\n}\r\n\r\nfunction messageFromJson(messageDescriptor, jsonMessage) {\r\n  const protoMessage = messageDescriptor.fromObject(JSON.parse(asUTF8(jsonMessage)));\r\n  return messageFromProtoMessage(messageDescriptor, protoMessage);\r\n}\r\n\r\nfunction findConvertedKey(convertedKey, messageDescriptor, convertFunc) {\r\n  for (const key in messageDescriptor.fields) {\r\n    if (convertFunc(key, messageDescriptor).toString() === convertedKey) {\r\n      return key;\r\n    }\r\n  }\r\n  console.error('Failed to match key');\r\n  for (const key in messageDescriptor.fields) {\r\n    console.error('tried', convertFunc(key, messageDescriptor), '===', convertedKey);\r\n  }\r\n  console.error('all false.')\r\n}\r\n\r\nfunction reverseReplaceFieldNames(\r\n  messageDescriptor, convertedMessage, convertFunc) {\r\n    return replaceFieldNames(\r\n      messageDescriptor,\r\n      convertedMessage,\r\n      (convertedKey, messageDescriptor) => findConvertedKey(\r\n        convertedKey, messageDescriptor, convertFunc)\r\n    );\r\n  }\r\n\r\nfunction messageFromJsonCamelCase(messageDescriptor, jsonCamelCaseMessage) {\r\n  const camelCaseMessage = JSON.parse(asUTF8(jsonCamelCaseMessage));\r\n  const protoMessage = messageDescriptor.fromObject(reverseReplaceFieldNames(\r\n    messageDescriptor,\r\n    camelCaseMessage,\r\n    (camelCaseFieldName) => {\r\n      return protobuf.util.camelCase(camelCaseFieldName)\r\n    }\r\n  ));\r\n  return messageFromProtoMessage(messageDescriptor, protoMessage);\r\n}\r\n\r\nfunction messageFromJsonIds(messageDescriptor, jsonIdsMessage) {\r\n  const idsMessage = JSON.parse(asUTF8(jsonIdsMessage));\r\n  const protoMessage = messageDescriptor.fromObject(reverseReplaceFieldNames(\r\n    messageDescriptor,\r\n    idsMessage,\r\n    (fieldId, messageDescriptor) => messageDescriptor.fields[fieldId].id\r\n  ));\r\n  return messageFromProtoMessage(messageDescriptor, protoMessage);\r\n}\r\n\r\nfunction messageFromProtoMessage(messageDescriptor, protoMessage, options) {\r\n  return Map(Object.entries(protoMessage).map(([key, value]) => {\r\n    const fieldDescriptor = messageDescriptor.fields[key];\r\n    return [fieldDescriptor.id, valueEntriesFromProto(fieldDescriptor, value, options)];\r\n  }));\r\n}\r\n\r\nfunction valueEntriesFromProto(fieldDescriptor, value, options) {\r\n  if (fieldDescriptor.map) {\r\n    return List(Object.entries(value).map(([key, value]) => ({\r\n      id: shortid.generate(),\r\n      key: valueFromProto(fieldDescriptor.keyType, null, key),\r\n      value: valueFromProto(fieldDescriptor.type, fieldDescriptor.resolvedType, value),\r\n    })));\r\n  }\r\n  const values = fieldDescriptor.repeated ? value : [value];\r\n  return List(\r\n    values.map(v => (Map({\r\n      id: shortid.generate(),\r\n      value: valueFromProto(fieldDescriptor, v, options)\r\n    })))\r\n  );\r\n}\r\n\r\nfunction valueFromProto(fieldDescriptor, protoValue, options) {\r\n  switch (fieldDescriptor.type) {\r\n    case \"bytes\":\r\n      return protobuf.util.base64.encode(protoValue, 0, protoValue.length);\r\n\r\n    case \"string\":\r\n    case \"int32\":\r\n    case \"int64\":\r\n    case \"sint32\":\r\n    case \"sint64\":\r\n    case \"uint32\":\r\n    case \"uint64\":\r\n    case \"fixed32\":\r\n    case \"fixed64\":\r\n    case \"float\":\r\n    case \"double\":\r\n    case \"bool\":\r\n      return protoValue;\r\n    default:\r\n      break;\r\n  }\r\n  const resolvedType = fieldDescriptor.resolvedType;\r\n  if (resolvedType === null) {\r\n    console.error(\"Unhandled value type\", fieldDescriptor);\r\n    return \"\";\r\n  }\r\n  if (resolvedType.constructor === protobuf.Enum) {\r\n    return protoValue;\r\n  } else if (resolvedType.constructor === protobuf.Type) {\r\n    return messageFromProtoMessage(resolvedType, protoValue, options);\r\n  }\r\n  console.error(\"Unhandled value type\", fieldDescriptor);\r\n  return \"\";\r\n}\r\n\r\nfunction defaultValueEntryForField(fieldDescriptor) {\r\n  var valueObject = {\r\n    id: shortid.generate(),\r\n    value: defaultValueForFieldType(fieldDescriptor.type, fieldDescriptor.resolvedType)\r\n  };\r\n  if (fieldDescriptor.map) {\r\n    valueObject.key = defaultValueForFieldType(fieldDescriptor.keyType, null);\r\n  }\r\n  return Map(valueObject);\r\n}\r\n\r\nfunction defaultValueForFieldType(fieldType, resolvedType) {\r\n  switch (fieldType) {\r\n    case \"string\":\r\n    case \"bytes\":\r\n      return \"\";\r\n    case \"int32\":\r\n    case \"int64\":\r\n    case \"sint32\":\r\n    case \"sint64\":\r\n    case \"uint32\":\r\n    case \"uint64\":\r\n    case \"fixed32\":\r\n    case \"fixed64\":\r\n    case \"float\":\r\n    case \"double\":\r\n      return \"0\"\r\n    case \"bool\":\r\n      return false;\r\n    default:\r\n      break;\r\n  }\r\n  if (resolvedType === null) {\r\n    console.error(\"Unhandled default type, expected resolved type\", fieldType);\r\n    return \"\";\r\n  }\r\n  if (resolvedType.constructor === protobuf.Enum) {\r\n    return parseInt(List(Object.keys(resolvedType.valuesById)).sort().first(), 10);\r\n  } else if (resolvedType.constructor === protobuf.Type) {\r\n    return Map();\r\n  }\r\n  console.error(\"Unhandled default type\", fieldType);\r\n  return \"\";\r\n}\r\n\r\nfunction fullMessageDescriptorName(messageDescriptor) {\r\n  if (!messageDescriptor) {\r\n    return \"\";\r\n  }\r\n  var name = messageDescriptor.name;\r\n  while (messageDescriptor.parent && messageDescriptor.parent.name) {\r\n    name = messageDescriptor.parent.name + '.' + name;\r\n    messageDescriptor = messageDescriptor.parent;\r\n  }\r\n  return name;\r\n}\r\n\r\nexport {\r\n  converterFormats,\r\n  converterName,\r\n  converterExtension,\r\n  convertTo,\r\n  convertFrom,\r\n  defaultValueEntryForField,\r\n  fullMessageDescriptorName,\r\n  messageToProto\r\n};\r\n","const { fromJS, isKeyed } = require('immutable');\r\n\r\nconst tryParseToInt = v => {\r\n  if (/^[0-9]+$/.test(v)) {\r\n    return parseInt(v);\r\n  }\r\n  return v;\r\n}\r\n\r\nconst reviver = (key, value) => {\r\n  if (!isKeyed(value)) {\r\n    return value.toList();\r\n  }\r\n  return value.mapEntries(([k, v]) => [tryParseToInt(k), v]).toMap();\r\n}\r\n\r\nconst loadJson = keyName => {\r\n  const data = fromJS(\r\n    JSON.parse(window.localStorage.getItem(keyName) || \"{}\"),\r\n    reviver);\r\n  console.log('Loaded', keyName, data);\r\n  return data;\r\n}\r\n\r\nconst saveJson = (keyName, data) => {\r\n  if (data.isEmpty()) {\r\n    console.log('Removing', keyName, data);\r\n    window.localStorage.removeItem(keyName);\r\n  } else {\r\n    console.log('Saving', keyName, data);\r\n    window.localStorage.setItem(keyName, JSON.stringify(data.toJSON()));\r\n  }\r\n}\r\n\r\nconst protos = {\r\n  load: () => loadJson('stored_protos'),\r\n  save: rawStoredProtos => saveJson('stored_protos', rawStoredProtos)\r\n};\r\n\r\nconst messages = {\r\n  load: () => loadJson('stored_messages'),\r\n  save: messages => saveJson('stored_messages', messages)\r\n}\r\n\r\nconst format = {\r\n  load: () => {\r\n    return window.localStorage.getItem('format') || 'binary';\r\n  },\r\n  save: format => {\r\n    if (format === 'binary') {\r\n      window.localStorage.removeItem('format');\r\n    } else {\r\n      window.localStorage.setItem('format', format);\r\n    }\r\n  }\r\n}\r\n\r\nconst config = {\r\n  load: () => loadJson('config'),\r\n  save: config => saveJson('config', config),\r\n}\r\n\r\nexport default {protos, messages, format, config};\r\n","import React from 'react';\r\nconst protobuf = require(\"protobufjs\");\r\nconst shortid = require('shortid');\r\nconst ProtoConvert = require('../ProtoConvert')\r\n\r\nconst { List, Map } = require('immutable');\r\n\r\nclass MessageBuilderScaffold extends React.Component {\r\n  handleSelectMessage = (message) => {\r\n    this.props.callbacks.onSet(List(), message);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.messageDescriptor === undefined) {\r\n      return null;\r\n    }\r\n    const path = List();\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"message-builder\">\r\n          <div className=\"inner-message-builder\">\r\n          <h1>\r\n            {this.props.messageDescriptor.name} builder\r\n          </h1>\r\n          <StoreMessageButton\r\n            path={path}\r\n            messageDescriptor={this.props.messageDescriptor}\r\n            callbacks={this.props.callbacks}/>\r\n          <StoredMessageSelector\r\n            path={path}\r\n            storedMessages={this.props.storedMessages}\r\n            messageDescriptor={this.props.messageDescriptor}\r\n            shouldSet={true}\r\n            onSelectMessage={this.handleSelectMessage} />\r\n          <MessageFieldsBuilder\r\n            path={path}\r\n            storedMessages={this.props.storedMessages}\r\n            messageDescriptor={this.props.messageDescriptor}\r\n            values={this.props.message}\r\n            callbacks={this.props.callbacks} />\r\n          </div>\r\n        </div>\r\n        <div className=\"output\">\r\n          <Output\r\n            messageDescriptor={this.props.messageDescriptor}\r\n            format={this.props.format}\r\n            builtMessage={this.props.builtMessage}\r\n            buildMessageUpToDate={this.props.buildMessageUpToDate}\r\n            callbacks={this.props.callbacks} />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass StoredMessageSelector extends React.Component {\r\n\r\n  fullMessageDescriptorName = () => ProtoConvert.fullMessageDescriptorName(\r\n    this.props.messageDescriptor);\r\n\r\n  handleSelectMessage = (event) => {\r\n    const name = event.target.value;\r\n    if (name === '') {\r\n      return;\r\n    }\r\n    const message = this.props.storedMessages.getIn(\r\n      [this.fullMessageDescriptorName(), name]);\r\n    this.props.onSelectMessage(message);\r\n    event.target.value = '';\r\n  }\r\n\r\n  render() {\r\n    const storedMessages = this.props.storedMessages.get(\r\n      this.fullMessageDescriptorName()) || Map();\r\n    if (storedMessages.isEmpty()) {\r\n      return null;\r\n    }\r\n    return (\r\n      <select onChange={this.handleSelectMessage}>\r\n        <option value=''>Stored message</option>\r\n        {storedMessages.keySeq().map((name) =>\r\n          <option key={name} value={name}>\r\n            {name}\r\n          </option>\r\n        )}\r\n      </select>\r\n    );\r\n  }\r\n}\r\n\r\nclass Output extends React.Component {\r\n  handleExportToFile = () => this.props.callbacks.onExport('file');\r\n\r\n  handleChangeFormat = (event) =>\r\n    this.props.callbacks.onSetFormat(event.target.value);\r\n\r\n  handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      const fileData = new Uint8Array(reader.result);\r\n      this.props.callbacks.onImport(fileData);\r\n    };\r\n    reader.onerror = (err) =>\r\n      console.error('FileLoading of', file, 'failed:', err);\r\n    reader.readAsArrayBuffer(file);\r\n  }\r\n\r\n  handleImportFromFile = () => this.refs.fileuploader.click();\r\n\r\n  handleChangeBuiltMessage = (event) => {\r\n    const value = this.props.format === 'binary' ? new Uint8Array(event.target.value.split(',')) : event.target.value;\r\n    this.props.callbacks.onImport(value);\r\n  }\r\n\r\n  renderControls() {\r\n    return (\r\n      <div className=\"io-controls\">\r\n        <div>\r\n          Format:\r\n          <select\r\n            onChange={this.handleChangeFormat}\r\n            defaultValue={this.props.format}>\r\n            {ProtoConvert.converterFormats.map(key =>\r\n              <option key={key} value={key}>\r\n                {ProtoConvert.converterName(key)}\r\n              </option>\r\n            )}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          import\r\n          <button onClick={this.handleImportFromFile}>Load from file</button>\r\n          <input\r\n            type=\"file\"\r\n            ref=\"fileuploader\"\r\n            onChange={this.handleFileChange}\r\n            hidden />\r\n        </div>\r\n        <div>\r\n          export\r\n          <button onClick={this.handleExportToFile}> Save as file </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const builtMessage = this.props.builtMessage[0]\r\n    const errorMessage = builtMessage === null ? this.props.builtMessage[1] : null;\r\n    return (\r\n      <div className=\"inner-output\">\r\n        {this.renderControls()}\r\n        <textarea\r\n          value={errorMessage || builtMessage}\r\n          className={builtMessage === null ? \"invalid area\" : \"area\"}\r\n          disabled={!this.props.buildMessageUpToDate}\r\n          onChange={this.handleChangeBuiltMessage} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass StoreMessageButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isStoring: false,\r\n    }\r\n  }\r\n\r\n  handleStartStoring = () => {\r\n    this.setState({\r\n      isStoring: true\r\n    });\r\n  }\r\n\r\n  handleCommitStore = () => {\r\n    const storeName = this.refs.storeName.value;\r\n    const fullMessageDescriptorName = ProtoConvert.fullMessageDescriptorName(\r\n      this.props.messageDescriptor\r\n    );\r\n    this.props.callbacks.onStore(\r\n      this.props.path,\r\n      fullMessageDescriptorName,\r\n      storeName\r\n    );\r\n    this.setState({isStoring: false});\r\n  }\r\n\r\n  handleDiscardStore = () => {\r\n    this.setState({isStoring: false});\r\n  }\r\n\r\n  render() {\r\n    const messageDescriptor = this.props.messageDescriptor;\r\n    if (!messageDescriptor || messageDescriptor.constructor !== protobuf.Type) {\r\n      return null;\r\n    }\r\n    if (!this.state.isStoring) {\r\n      return (\r\n        <button onClick={this.handleStartStoring}>\r\n          store\r\n        </button>\r\n      );\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        Store as <input type=\"text\" ref=\"storeName\"/>\r\n        <button onClick={this.handleDiscardStore}>cancel</button>\r\n        <button onClick={this.handleCommitStore}>store</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFieldsBuilder extends React.Component {\r\n\r\n  isRegularField = fieldDescriptor => fieldDescriptor.partOf === null;\r\n\r\n  fieldTypeName = (fieldDescriptor) => {\r\n    const type = fieldDescriptor.type;\r\n    if (fieldDescriptor.map) {\r\n      const keyType = fieldDescriptor.keyType;\r\n      return 'map<' + keyType + ',' + type + '>';\r\n    }\r\n    const repeated = fieldDescriptor.repeated ? '*' : '';\r\n    const required = fieldDescriptor.required ? '!' : '';\r\n    return type + repeated + required;\r\n  }\r\n\r\n  render() {\r\n    const regularFieldDescriptors = Object\r\n      .values(this.props.messageDescriptor.fields)\r\n      .filter(this.isRegularField);\r\n    const oneOfDescriptors = Object\r\n      .values(this.props.messageDescriptor.oneofs || {});\r\n\r\n    const regularFieldItems = regularFieldDescriptors.map(fieldDescriptor =>\r\n      <li key={fieldDescriptor.name}>\r\n        <b>{this.fieldTypeName(fieldDescriptor)}</b> - {fieldDescriptor.name} = {fieldDescriptor.id}\r\n        <MessageFieldValuesBuilder\r\n          path={this.props.path.concat([fieldDescriptor.id])}\r\n          storedMessages={this.props.storedMessages}\r\n          fieldDescriptor={fieldDescriptor}\r\n          valueEntries={this.props.values.get(fieldDescriptor.id) || List()}\r\n          callbacks={this.props.callbacks} />\r\n      </li>\r\n    );\r\n\r\n    const oneOfItems = oneOfDescriptors.map(oneOfDescriptor =>\r\n      <li key={oneOfDescriptor.name}>\r\n        <b>oneof</b> {oneOfDescriptor.name}\r\n        <MessageOneOfFieldValuesBuilder\r\n          path={this.props.path}\r\n          storedMessages={this.props.storedMessages}\r\n          messageDescriptor={this.props.messageDescriptor}\r\n          oneOfDescriptor={oneOfDescriptor}\r\n          values={this.props.values}\r\n          callbacks={this.props.callbacks} />\r\n      </li>\r\n    );\r\n\r\n    return (\r\n      <ul>\r\n        {regularFieldItems}\r\n        {oneOfItems}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFieldValuesBuilder extends React.Component{\r\n  render() {\r\n    const messageFieldValueBuilders = this.props.valueEntries.map((valueEntry, index) =>\r\n      <MessageFieldValueBuilder\r\n        key={valueEntry.get('id')}\r\n        path={this.props.path}\r\n        storedMessages={this.props.storedMessages}\r\n        index={index}\r\n        numEntries={this.props.valueEntries.size}\r\n        fieldDescriptor={this.props.fieldDescriptor}\r\n        valueEntry={valueEntry}\r\n        callbacks={this.props.callbacks} />\r\n    );\r\n\r\n    return (\r\n      <ul>\r\n        {messageFieldValueBuilders}\r\n        <MessageFieldValuesAddControls\r\n          path={this.props.path}\r\n          storedMessages={this.props.storedMessages}\r\n          fieldDescriptor={this.props.fieldDescriptor}\r\n          numValueEntries={this.props.valueEntries.size}\r\n          callbacks={this.props.callbacks} />\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFieldValuesAddControls extends React.Component {\r\n  handleSet = () => {\r\n    this.props.callbacks.onAdd(\r\n      this.props.path,\r\n      ProtoConvert.defaultValueEntryForField(this.props.fieldDescriptor));\r\n  }\r\n\r\n  handleSelectMessage = (message) => {\r\n    const valueEntry = Map({\r\n      id: shortid.generate(),\r\n      value: message,\r\n    });\r\n    this.props.callbacks.onAdd(this.props.path, valueEntry);\r\n  }\r\n\r\n  render() {\r\n    const showSet = this.props.numValueEntries === 0;\r\n    const showAdd = this.props.fieldDescriptor.repeated || this.props.fieldDescriptor.map;\r\n    if (!showSet && !showAdd) {\r\n      return null;\r\n    }\r\n    return (\r\n      <li>\r\n        <button onClick={this.handleSet}> {(showAdd) ? 'add' : 'set'} </button>\r\n        <StoredMessageSelector\r\n          path={this.props.path}\r\n          storedMessages={this.props.storedMessages}\r\n          messageDescriptor={this.props.fieldDescriptor.resolvedType}\r\n          onSelectMessage={this.handleSelectMessage} />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFieldValueBuilder extends React.Component{\r\n  handleDelete = () =>\r\n    this.props.callbacks.onDelete(this.props.path.concat([this.props.index]));\r\n\r\n  handleDuplicate = () => {\r\n    this.props.callbacks.onAdd(\r\n      this.props.path,\r\n      this.props.valueEntry.set('id', shortid.generate())\r\n    );\r\n  }\r\n\r\n  handleMoveUp = () => {\r\n    this.props.callbacks.onMove(this.props.path, this.props.index, this.props.index - 1);\r\n  }\r\n\r\n  handleMoveDown = () => {\r\n    this.props.callbacks.onMove(this.props.path, this.props.index, this.props.index + 1);\r\n  }\r\n\r\n  render() {\r\n    const showDelete = this.props.fieldDescriptor.partOf === null;\r\n    const showDuplicate = this.props.fieldDescriptor.repeated || this.props.fieldDescriptor.map;\r\n    const showMove = this.props.fieldDescriptor.repeated;\r\n    const enableMoveDown = this.props.index !== this.props.numEntries - 1;\r\n    const enableMoveUp = this.props.index !== 0;\r\n    return (\r\n      <li key={this.props.valueEntry.get('id')}>\r\n        <button\r\n          onClick={this.handleDelete}\r\n          hidden={!showDelete}\r\n          className=\"tiny\">\r\n          -\r\n        </button>\r\n        <button\r\n          onClick={this.handleDuplicate}\r\n          hidden={!showDuplicate}\r\n          className=\"tiny\">\r\n          *\r\n        </button>\r\n        <button\r\n          onClick={this.handleMoveDown}\r\n          hidden={!showMove}\r\n          disabled={!enableMoveDown}\r\n          className=\"tiny\">\r\n          v\r\n        </button>\r\n        <button\r\n          onClick={this.handleMoveUp}\r\n          hidden={!showMove}\r\n          disabled={!enableMoveUp}\r\n          className=\"tiny\">\r\n          ^\r\n        </button>\r\n        <StoreMessageButton\r\n          path={this.props.path.concat([this.props.index, 'value'])}\r\n          messageDescriptor={this.props.fieldDescriptor.resolvedType}\r\n          callbacks={this.props.callbacks} />\r\n        {\r\n          this.props.fieldDescriptor.map\r\n          ? <MessageFieldInput\r\n              path={this.props.path.concat([this.props.index, 'key'])}\r\n              storedMessages={this.props.storedMessages}\r\n              fieldType={this.props.fieldDescriptor.keyType}\r\n              resolvedType={null}\r\n              value={this.props.valueEntry.get('key')}\r\n              callbacks={this.props.callbacks} />\r\n          : <React.Fragment />\r\n        }\r\n        <MessageFieldInput\r\n          path={this.props.path.concat([this.props.index, 'value'])}\r\n          storedMessages={this.props.storedMessages}\r\n          fieldType={this.props.fieldDescriptor.type}\r\n          resolvedType={this.props.fieldDescriptor.resolvedType}\r\n          value={this.props.valueEntry.get('value')}\r\n          callbacks={this.props.callbacks} />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageOneOfFieldValuesBuilder extends React.Component {\r\n\r\n  currentFieldDescriptor = () => {\r\n    const maybeCurrentFieldId = this.props.values.keySeq().find(\r\n      fieldId => this.props.messageDescriptor.fieldsById[fieldId].partOf === this.props.oneOfDescriptor);\r\n    if (maybeCurrentFieldId === undefined) {\r\n      return null;\r\n    }\r\n    return this.props.messageDescriptor.fieldsById[maybeCurrentFieldId];\r\n  }\r\n\r\n  onChange = (event) => {\r\n    const currentFieldDescriptor = this.currentFieldDescriptor();\r\n    if (currentFieldDescriptor !== null) {\r\n      this.props.callbacks.onDelete(this.props.path.concat([currentFieldDescriptor.id, 0]));\r\n    }\r\n    if (event.target.value.length !== 0) {\r\n      const newFieldId = parseInt(event.target.value, 10);\r\n      const newFieldDescriptor = this.props.messageDescriptor.fieldsById[newFieldId];\r\n      this.props.callbacks.onAdd(\r\n        this.props.path.concat([newFieldDescriptor.id]),\r\n        ProtoConvert.defaultValueEntryForField(newFieldDescriptor)\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const maybeCurrentFieldDescriptor = this.currentFieldDescriptor();\r\n    return (\r\n      <React.Fragment>\r\n        <ul>\r\n          <li>\r\n            <select\r\n              value={maybeCurrentFieldDescriptor !== null ? maybeCurrentFieldDescriptor.id : ''}\r\n              onChange={this.onChange}>\r\n              <option value={''}></option>\r\n              {this.props.oneOfDescriptor.fieldsArray.map(\r\n                (fieldDescriptor) => (\r\n                  <option\r\n                    key={fieldDescriptor.id}\r\n                    value={fieldDescriptor.id}>\r\n                    {fieldDescriptor.type} - {fieldDescriptor.name} = {fieldDescriptor.id}\r\n                  </option>\r\n                )\r\n              )}\r\n            </select>\r\n            {(maybeCurrentFieldDescriptor !== null\r\n              ? <MessageFieldValuesBuilder\r\n                  path={this.props.path.concat([maybeCurrentFieldDescriptor.id])}\r\n                  storedMessages={this.props.storedMessages}\r\n                  fieldDescriptor={maybeCurrentFieldDescriptor}\r\n                  valueEntries={this.props.values.get(maybeCurrentFieldDescriptor.id) || List()}\r\n                  callbacks={this.props.callbacks} />\r\n              : <React.Fragment />\r\n            )}\r\n          </li>\r\n        </ul>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFieldInput extends React.Component {\r\n  render() {\r\n    switch (this.props.fieldType) {\r\n      case \"string\":\r\n        return <MessageTextInput\r\n          path={this.props.path}\r\n          value={this.props.value}\r\n          callbacks={this.props.callbacks} />\r\n      case \"bytes\":\r\n        return <MessageBytesInput\r\n          path={this.props.path}\r\n          value={this.props.value}\r\n          callbacks={this.props.callbacks} />\r\n      case \"int32\":\r\n      case \"int64\":\r\n      case \"sint32\":\r\n      case \"sint64\":\r\n      case \"uint32\":\r\n      case \"uint64\":\r\n      case \"fixed32\":\r\n      case \"fixed64\":\r\n        return <MessageIntInput\r\n          path={this.props.path}\r\n          value={this.props.value}\r\n          callbacks={this.props.callbacks} />\r\n      case \"float\":\r\n      case \"double\":\r\n        return <MessageFloatInput\r\n          path={this.props.path}\r\n          value={this.props.value}\r\n          callbacks={this.props.callbacks} />\r\n      case \"bool\":\r\n        return <MessageBoolInput\r\n          path={this.props.path}\r\n          value={this.props.value}\r\n          callbacks={this.props.callbacks} />\r\n      default:\r\n        break;\r\n    }\r\n    const resolvedType = this.props.resolvedType;\r\n    if (resolvedType.constructor === protobuf.Enum) {\r\n      return <MessageEnumInput\r\n        path={this.props.path}\r\n        type={resolvedType}\r\n        value={this.props.value}\r\n        callbacks={this.props.callbacks} />\r\n    } else if (resolvedType.constructor === protobuf.Type) {\r\n      return <MessageFieldsBuilder\r\n        path={this.props.path}\r\n        storedMessages={this.props.storedMessages}\r\n        messageDescriptor={resolvedType}\r\n        values={this.props.value}\r\n        callbacks={this.props.callbacks} />\r\n    }\r\n    console.error(\"Unhandled input type\", this.props.fieldType);\r\n    return <div/>\r\n  }\r\n}\r\n\r\nclass MessageTextInput extends React.Component {\r\n  handleChange = (event) => {\r\n    // console.log('MessageTextInput change', this.props.path, event.target.value);\r\n    this.props.callbacks.onSet(this.props.path, event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return <textarea onChange={this.handleChange} value={this.props.value} />\r\n  }\r\n}\r\n\r\nclass MessageBytesInput extends React.Component {\r\n  isValid = () => protobuf.util.base64.test(this.props.value);\r\n\r\n  handleChange = (event) => {\r\n    // console.log(\"MessageBytesInput change\", this.props.path, event.target.value);\r\n    this.props.callbacks.onSet(this.props.path, event.target.value);\r\n  }\r\n\r\n  render() {\r\n    const isValid = this.isValid();\r\n    return (\r\n      <textarea\r\n        onChange={this.handleChange}\r\n        value={this.props.value}\r\n        className={isValid ? \"\" : \"invalid\"} />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nclass MessageIntInput extends React.Component {\r\n  isValid = () => /^[0-9]+$/.test(this.props.value);\r\n\r\n  handleChange = (event) => {\r\n    // console.log('MessageIntInput change', this.props.path, event.target.value);\r\n    this.props.callbacks.onSet(this.props.path, event.target.value);\r\n  }\r\n\r\n  render() {\r\n    const isValid = this.isValid();\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        onChange={this.handleChange}\r\n        value={this.props.value}\r\n        className={isValid ? \"\" : \"invalid\"} />\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFloatInput extends React.Component {\r\n  isValid = () =>\r\n    /^[0-9]+$|^[0-9]+[.][0-9]*$|^[0-9]*[.][0-9]+$/.test(this.props.value);\r\n\r\n  handleChange = (event) => {\r\n    // console.log('MessageFloatInput change', this.props.path, event.target.value);\r\n    this.props.callbacks.onSet(this.props.path, event.target.value);\r\n  }\r\n\r\n  render() {\r\n    const isValid = this.isValid();\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        onChange={this.handleChange}\r\n        value={this.props.value}\r\n        className={isValid ? \"\" : \"invalid\"} />\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageBoolInput extends React.Component {\r\n  handleChange = (event) => {\r\n    // console.log('MessageBoolInput', this.props.path, event.target.checked);\r\n    this.props.callbacks.onSet(this.props.path, event.target.checked);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={this.props.value}\r\n        onChange={this.handleChange} />\r\n    )\r\n  }\r\n}\r\n\r\nclass MessageEnumInput extends React.Component {\r\n  handleChange = (event) => {\r\n    const value = parseInt(event.target.value);\r\n    // console.log('MessageEnumInput.change', this.props.path, typeof(value), value);\r\n    this.props.callbacks.onSet(this.props.path, value);\r\n  }\r\n\r\n  render() {\r\n    const keys = List(Object.keys(this.props.type.valuesById)).sort();\r\n    return (\r\n      <select defaultValue={this.props.value} onChange={this.handleChange}>\r\n        {keys.map(key => (\r\n          <option value={key} key={key}>\r\n            {this.props.type.valuesById[key]} = {key}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessageBuilderScaffold;\r\n","import React from 'react';\r\nconst ProtoConvert =  require('../ProtoConvert');\r\nconst protobuf = require(\"protobufjs\");\r\nconst { List, Map } = require('immutable');\r\n\r\nclass ProtoLibrary extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"inner-proto-library\">\r\n        <h2>\r\n          Known messages\r\n        </h2>\r\n        <ProtoRoot\r\n          protoRoot={this.props.protoRoot}\r\n          storedMessages={this.props.storedMessages}\r\n          callbacks={this.props.callbacks} />\r\n        <h2>\r\n          Known files\r\n        </h2>\r\n        <ProtoFiles\r\n          filenames={this.props.filenames}\r\n          fileDependencies={this.props.fileDependencies}\r\n          callbacks={this.props.callbacks} />\r\n        <ProtoInput callbacks={this.props.callbacks} />\r\n        <ProtoUpload callbacks={this.props.callbacks} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass ProtoRoot extends React.Component {\r\n  render() {\r\n    if (!this.props.protoRoot) {\r\n      return <React.Fragment />;\r\n    }\r\n    return <ProtoNamespace\r\n      name={''}\r\n      namespace={this.props.protoRoot}\r\n      storedMessages={this.props.storedMessages}\r\n      callbacks={this.props.callbacks} />\r\n  }\r\n}\r\n\r\nclass ProtoNamespace extends React.Component {\r\n  handleBuild = () =>\r\n    this.props.callbacks.onSelectMessageDescriptor(this.props.namespace);\r\n\r\n  render() {\r\n    const nested = this.props.namespace.nested || {};\r\n    const entries = Object.entries(nested);\r\n    const namespaces = entries.filter(([k, v]) => v.constructor === protobuf.Namespace);\r\n    const types = entries.filter(([k, v]) => v.constructor === protobuf.Type);\r\n\r\n    if (this.props.namespace.constructor === protobuf.Namespace) {\r\n      const baseName = this.props.name ? this.props.name + '.' : '';\r\n      if (namespaces.length === 1 && types.length === 0) {\r\n        const [subNamespaceName, subNamespace] = namespaces[0];\r\n        return <ProtoNamespace\r\n          name={baseName + subNamespaceName}\r\n          namespace={subNamespace}\r\n          storedMessages={this.props.storedMessages}\r\n          callbacks={this.props.callbacks} />\r\n      } else if (namespaces.length === 0 && types.length === 1) {\r\n        const [subMessageName, subMessage] = types[0];\r\n        return <ProtoMessage\r\n          name={baseName + subMessageName}\r\n          message={subMessage}\r\n          storedMessages={this.props.storedMessages}\r\n          callbacks={this.props.callbacks} />;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.name}\r\n        <button\r\n          onClick={this.handleBuild}\r\n          hidden={!this.props.buildable}>\r\n          build\r\n        </button>\r\n        <ul>\r\n          {namespaces.map(([k ,v]) =>\r\n            <li key={k} >\r\n              <ProtoNamespace\r\n                name={k}\r\n                namespace={v}\r\n                storedMessages={this.props.storedMessages}\r\n                callbacks={this.props.callbacks} />\r\n            </li>\r\n          )}\r\n          {types.map(([k, v]) =>\r\n            <li key={k}>\r\n              <ProtoMessage\r\n                name={k}\r\n                message={v}\r\n                storedMessages={this.props.storedMessages}\r\n                callbacks={this.props.callbacks} />\r\n            </li>\r\n           )}\r\n        </ul>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass ProtoMessage extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ProtoNamespace\r\n          name={this.props.name}\r\n          namespace={this.props.message}\r\n          buildable={true}\r\n          storedMessages={this.props.storedMessages}\r\n          callbacks={this.props.callbacks} />\r\n        <StoredMessages\r\n          storedMessages={this.props.storedMessages}\r\n          messageDescriptor={this.props.message}\r\n          callbacks={this.props.callbacks} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass ProtoFiles extends React.Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.props.filenames.sort().map(filename =>\r\n          <li key={filename}>\r\n            <ProtoFile\r\n              filename={filename}\r\n              fileDependencies={this.props.fileDependencies}\r\n              callbacks={this.props.callbacks} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nclass ProtoFile extends React.Component {\r\n  handleClick = () => {\r\n    this.props.callbacks.onRemoveProto(this.props.filename);\r\n  }\r\n\r\n  render() {\r\n    const fileDependents = this.props.fileDependencies.get(this.props.filename, List());\r\n\r\n    const importingFiles = (fileDependents.isEmpty()\r\n      ? <React.Fragment />\r\n      : <ProtoFiles\r\n          filenames={fileDependents}\r\n          fileDependencies={this.props.fileDependencies}\r\n          callbacks={this.props.callbacks}/>);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <button\r\n          onClick={this.handleClick}\r\n          disabled={!fileDependents.isEmpty()}\r\n          className=\"tiny\">\r\n           -\r\n        </button>\r\n        {this.props.filename}\r\n        {importingFiles}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass StoredMessages extends React.Component {\r\n  render() {\r\n    const fullMessageDescriptorName = ProtoConvert.fullMessageDescriptorName(this.props.messageDescriptor)\r\n    const storedMessages = this.props.storedMessages.get(fullMessageDescriptorName);\r\n    if (!storedMessages) {\r\n      return null;\r\n    }\r\n    return (\r\n      <ul>\r\n        {storedMessages.keySeq().map(name =>\r\n          <StoredMessage\r\n            key={name}\r\n            name={name}\r\n            messageDescriptor={this.props.messageDescriptor}\r\n            callbacks={this.props.callbacks} />\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nclass StoredMessage extends React.Component {\r\n  handleRemove = (event) => {\r\n    this.props.callbacks.onRemoveStoredMessage(\r\n      ProtoConvert.fullMessageDescriptorName(this.props.messageDescriptor),\r\n      this.props.name\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <li>\r\n        <button onClick={this.handleRemove} className='tiny'>\r\n        -\r\n        </button>\r\n        {this.props.name}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nclass ProtoInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filename: \"\",\r\n      isAdding: false,\r\n      protoContent: \"\",\r\n      error: \"\",\r\n    }\r\n  }\r\n\r\n  handleStartAdding = () => this.setState({isAdding: true});\r\n\r\n  handleFilenameChanged = e => {\r\n    const filename = e.target.value;\r\n    this.setState({filename})\r\n  }\r\n\r\n  handleProtoContentChanged = e => {\r\n    const protoContent = e.target.value;\r\n    this.setState({protoContent});\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    const filename = this.state.filename;\r\n    const protoContent = this.state.protoContent;\r\n    const fileContents = Map([[filename, protoContent]]);\r\n    const error = this.props.callbacks.onValidateProto(fileContents)\r\n    if (error) {\r\n      console.error(\"Adding proto failed due to error\", error);\r\n      this.setState({error});\r\n    } else {\r\n      this.props.callbacks.onAddProto(fileContents);\r\n      this.setState({\r\n        filename: \"\",\r\n        isAdding: false,\r\n        protoContent: \"\",\r\n        error: \"\",\r\n      });\r\n    }\r\n  }\r\n\r\n  renderError() {\r\n    if (!this.state.error) {\r\n      return <React.Fragment />;\r\n    }\r\n    return <React.Fragment><textarea value={this.state.error} className=\"invalid\" readOnly></textarea></React.Fragment>;\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isAdding) {\r\n      return <button onClick={this.handleStartAdding} > Add </button>\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        File name: <input type=\"text\" value={this.state.filename} onChange={this.handleFilenameChanged} /> <br />\r\n        ProtoContent: <br />\r\n        <textarea value={this.state.protoContent} onChange={this.handleProtoContentChanged}/> <br />\r\n        {this.renderError()}\r\n        <button onClick={this.handleSubmit} > Submit </button>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nclass ProtoUpload extends React.Component {\r\n  readFile = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const text = reader.result;\r\n        resolve([file.name, text]);\r\n      };\r\n      reader.onerror = (err) => {\r\n        reject({file, err});\r\n      };\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  handleFileChange = (event) => {\r\n    Promise\r\n      .all(List(event.target.files).map(this.readFile).toJS())\r\n      .then(fileContents => {\r\n        this.props.callbacks.onAddProto(Map(fileContents));\r\n      }, (file) => console.error('FileLoading of', file, 'failed:'));\r\n  }\r\n\r\n  handleClick = () => this.refs.fileuploader.click();\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <button onClick={this.handleClick}>\r\n          From disk\r\n        </button>\r\n        <input\r\n          type=\"file\"\r\n          ref=\"fileuploader\"\r\n          onChange={this.handleFileChange}\r\n          hidden\r\n          multiple />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProtoLibrary;\r\n","import React from 'react';\r\nimport LocalStorage from '../LocalStorage'\r\nimport MessageBuilderScaffold from './MessageBuilder';\r\nimport ProtoLibrary from './ProtoLibrary';\r\nconst ProtoConvert = require('../ProtoConvert')\r\nconst protobuf = require(\"protobufjs\");\r\nconst FileSaver = require(\"file-saver\");\r\nconst { List, Map } = require('immutable');\r\n\r\nfunction loadStoredProtos(rawStoredProtos) {\r\n  // Cheat a bit so that we can load files synchronously\r\n  protobuf.util.isNode = true;\r\n  protobuf.util.fs = {\r\n    readFileSync: (filename) => {\r\n      const storedProto = rawStoredProtos.get(filename);\r\n      if (storedProto === undefined) {\r\n        throw new Error('Needed to load unknown file: ' + filename);\r\n      }\r\n      return storedProto.get('contents');\r\n    }\r\n  };\r\n\r\n  const protoRoot = new protobuf.Root();\r\n  const filenames = rawStoredProtos.keySeq().toList();\r\n  protoRoot.loadSync(filenames.toJS(), { keepCase: true });\r\n\r\n  const importEntries = List(filenames.flatMap(filename => {\r\n    const imports = protobuf.parse(\r\n      rawStoredProtos.get(filename).get('contents')\r\n    ).imports || [];\r\n    return imports.map(importName => [importName, filename]);\r\n  }));\r\n  const groupedEntries = importEntries\r\n    .groupBy(([importName, filename]) => importName)\r\n  const mappedEntries = groupedEntries\r\n    .map(importNameAndFilenames => {\r\n      const filenames = importNameAndFilenames.map(([importName, filename]) => filename);\r\n      const filenameSet = filenames.toSet();\r\n      return filenameSet;\r\n    });\r\n  const fileDependencies = mappedEntries;\r\n\r\n  protoRoot.resolveAll();\r\n\r\n  return {protoRoot, fileDependencies};\r\n}\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      config: Map(),\r\n      rawStoredProtos: Map(),\r\n      protoRoot: null,\r\n      fileDependencies: Map(),\r\n      rawStoredMessages: Map(),\r\n      message: Map(),\r\n      format: 'binary',\r\n      builtMessage: ['', null],\r\n    }\r\n    this.libraryCallbacks = {\r\n      onAddProto: this.handleAddProto,\r\n      onRemoveProto: this.handleRemoveProto,\r\n      onValidateProto: this.handleValidateProto,\r\n      onSelectMessageDescriptor: this.handleSelectMessageDescriptor,\r\n      onRemoveStoredMessage: this.handleRemoveStoredMessage,\r\n    };\r\n    this.messageBuilderCallbacks = {\r\n      onAdd: this.handleAddToMessage,\r\n      onDelete: this.handleDeleteFromMessage,\r\n      onSet: this.handleSetInMessage,\r\n      onMove: this.handleMoveInMessage,\r\n      onStore: this.handleStoreMessage,\r\n      onSetFormat: this.handleSetFormat,\r\n      onExport: this.handleExportMessage,\r\n      onImport: this.handleImportMessage,\r\n    };\r\n  }\r\n\r\n  isNightModeEnabled = () => {\r\n    return !this.state.config.get('day-mode');\r\n  }\r\n\r\n  handleToggleNightMode = () => {\r\n    this.setState((state) => ({\r\n      config: state.config.set('day-mode', !state.config.get('day-mode'))\r\n    }));\r\n  }\r\n\r\n  handleAddProto = (fileContents) => {\r\n    this.setState((state) => {\r\n      const newFileContents = fileContents.mapEntries(([filename, contents]) => {\r\n        return [filename, Map({contents})];\r\n      });\r\n      const rawStoredProtos = state.rawStoredProtos.mergeDeep(newFileContents);\r\n      try {\r\n        const {protoRoot, fileDependencies} = loadStoredProtos(rawStoredProtos);\r\n        return {rawStoredProtos, protoRoot, fileDependencies};\r\n      } catch (err) {\r\n        console.error(\"Failed to parse protobuf contents\", err);\r\n        return {};\r\n      }\r\n    });\r\n  }\r\n\r\n  handleRemoveProto = (fileName) => {\r\n    // console.log('handleRemoveProto', this.state.rawStoredProtos.toString());\r\n    this.setState((state) => {\r\n      const rawStoredProtos = state.rawStoredProtos.delete(fileName);\r\n      const {protoRoot, fileDependencies} = loadStoredProtos(rawStoredProtos);\r\n      return {rawStoredProtos, protoRoot, fileDependencies};\r\n    });\r\n  }\r\n\r\n  handleValidateProto = (fileContents) => {\r\n    const newFileContents = fileContents.mapEntries(([filename, contents]) => {\r\n      return [filename, Map({contents})];\r\n    });\r\n    const rawStoredProtos = this.state.rawStoredProtos.mergeDeep(newFileContents);\r\n    try {\r\n      loadStoredProtos(rawStoredProtos);\r\n      return null;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n\r\n  handleSelectMessageDescriptor = (messageDescriptor) => {\r\n    console.log('Setting descriptor to build:', messageDescriptor);\r\n    this.setState({\r\n      messageDescriptor,\r\n      message: Map(),\r\n      builtMessage: ['', null],\r\n      messageBuildTimer: null,\r\n    });\r\n  }\r\n\r\n  handleSetFormat = (format) => {\r\n    this.setState({\r\n      format,\r\n      builtMessage: [\r\n        ProtoConvert.convertTo(\r\n          format,\r\n          this.state.messageDescriptor,\r\n          this.state.message),\r\n        null\r\n      ],\r\n      messageBuildTimer: null,\r\n    });\r\n  }\r\n\r\n  handleExportMessage = (kind) => {\r\n    console.log('Export', this.state.format, 'to', kind);\r\n\r\n    const data = ProtoConvert.convertTo(\r\n      this.state.format,\r\n      this.state.messageDescriptor,\r\n      this.state.message);\r\n    // console.log('data', data);\r\n    console.log('handleExportMessage', this.refs);\r\n\r\n    if (kind === 'file') {\r\n      const extension = ProtoConvert.converterExtension(this.state.format);\r\n      const blob = new Blob([data], {type: 'application/octet-stream'});\r\n      FileSaver.saveAs(blob, this.state.messageDescriptor.name + '.' + extension);\r\n    } else {\r\n      console.error('Unhandled export kind:', kind);\r\n    }\r\n  }\r\n\r\n  handleImportMessage = (data) => {\r\n    console.log('Import', data.length, 'bytes as', this.state.format);\r\n    try {\r\n      const message = ProtoConvert.convertFrom(\r\n        this.state.format,\r\n        this.state.messageDescriptor,\r\n        data\r\n      );\r\n      this.setState({\r\n        message,\r\n        builtMessage: [\r\n          ProtoConvert.convertTo(\r\n            this.state.format,\r\n            this.state.messageDescriptor,\r\n            message),\r\n          null\r\n        ],\r\n        messageBuildTimer: null,\r\n      });\r\n    } catch (err) {\r\n      this.setState({builtMessage: [null, err]});\r\n    }\r\n  }\r\n\r\n  handleAddToMessage = (path, valueEntry) => {\r\n    console.log('handleAddToMessage', this.state.message, path.toString(), valueEntry);\r\n    this.setState((state) => ({\r\n      message: state.message.updateIn(\r\n        path,\r\n        (list = List()) => list.push(valueEntry)\r\n      ),\r\n      messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\r\n    }));\r\n  }\r\n\r\n  handleDeleteFromMessage = (path) => {\r\n    // console.log('handleDeleteFromMessage', this.state.message, path.toString());\r\n    this.setState((state) => {\r\n      const listPath = path.pop();\r\n      const listKey = listPath.last();\r\n      const messagePath = listPath.pop()\r\n      const messageWithDeletedListEntry = state.message.deleteIn(path);\r\n      // Delete the whole list if the last entry is removed\r\n      const newMessage = messageWithDeletedListEntry.updateIn(\r\n        messagePath,\r\n        message => (\r\n          message.get(listKey).isEmpty()\r\n          ? message.delete(listKey)\r\n          : message));\r\n      return {\r\n        message: newMessage,\r\n        messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\r\n      };\r\n    });\r\n  }\r\n\r\n  handleSetInMessage = (path, valueEntry) => {\r\n    // console.log('handleSetInMessage', this.state.message, path, valueEntry);\r\n    this.setState((state) => ({\r\n      message: state.message.setIn(path, valueEntry),\r\n      messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\r\n    }));\r\n  }\r\n\r\n  handleMoveInMessage = (path, fromIndex, toIndex) => {\r\n    this.setState((state) => ({\r\n      message: state.message.updateIn(\r\n        path,\r\n        (list = List()) => {\r\n          const movedEntry = list.get(fromIndex);\r\n          return list.delete(fromIndex).insert(toIndex, movedEntry);\r\n        }\r\n      ),\r\n      messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\r\n    }));\r\n  }\r\n\r\n  handleStoreMessage = (path, fullMessageDescriptorName, name) => {\r\n    this.setState((state) => {\r\n      const message = state.message.getIn(path);\r\n      return {\r\n        rawStoredMessages: state.rawStoredMessages.updateIn(\r\n          [fullMessageDescriptorName],\r\n          (map = Map()) => map.set(name, message))\r\n      };\r\n    })\r\n  }\r\n\r\n  handleRemoveStoredMessage = (fullMessageDescriptorName, name) => {\r\n    this.setState((state) => {\r\n      var rawStoredMessages = state.rawStoredMessages.deleteIn(\r\n        [fullMessageDescriptorName, name]);\r\n      rawStoredMessages = rawStoredMessages.get(fullMessageDescriptorName).isEmpty()\r\n        ? rawStoredMessages.delete(fullMessageDescriptorName)\r\n        : rawStoredMessages;\r\n      console.log('handleRemoveStoredMessage', fullMessageDescriptorName, name, rawStoredMessages)\r\n      return {rawStoredMessages};\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const rawStoredProtos = LocalStorage.protos.load();\r\n    const {protoRoot, fileDependencies} = loadStoredProtos(rawStoredProtos);\r\n    const rawStoredMessages = LocalStorage.messages.load();\r\n    const format = LocalStorage.format.load();\r\n    const config = LocalStorage.config.load();\r\n\r\n    this.setState({\r\n      config,\r\n      rawStoredProtos,\r\n      protoRoot,\r\n      fileDependencies,\r\n      rawStoredMessages,\r\n      format,\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.rawStoredProtos !== this.state.rawStoredProtos) {\r\n      LocalStorage.protos.save(this.state.rawStoredProtos);\r\n    }\r\n    if (prevState.format !== this.state.format) {\r\n      LocalStorage.format.save(this.state.format);\r\n    }\r\n    if (prevState.rawStoredMessages !== this.state.rawStoredMessages) {\r\n      LocalStorage.messages.save(this.state.rawStoredMessages);\r\n    }\r\n    if (prevState.config !== this.state.config) {\r\n      LocalStorage.config.save(this.state.config);\r\n    }\r\n  }\r\n\r\n  scheduleBuildMessage = (prevTimeout) => {\r\n    clearTimeout(prevTimeout);\r\n    return setTimeout(() =>\r\n      this.setState((state) => {\r\n        try {\r\n          return {\r\n            builtMessage: [\r\n              ProtoConvert.convertTo(\r\n                state.format,\r\n                state.messageDescriptor,\r\n                state.message),\r\n                null\r\n            ],\r\n            messageBuildTimer: null,\r\n          };\r\n        } catch (err) {\r\n          return {\r\n            builtMessage: [null, err],\r\n            messageBuildTimer: null,\r\n          }\r\n        }\r\n      }),\r\n      500\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`protool ${this.isNightModeEnabled() ? \"night-mode\" : \"\"}`}>\r\n        <div className=\"proto-library\">\r\n          <ProtoLibrary\r\n            filenames={this.state.rawStoredProtos.keySeq().toList()}\r\n            fileDependencies={this.state.fileDependencies}\r\n            protoRoot={this.state.protoRoot}\r\n            storedMessages={this.state.rawStoredMessages}\r\n            callbacks={this.libraryCallbacks} />\r\n            <div className=\"config\">\r\n              <label className=\"dark-mode-config\">\r\n                Dark mode:\r\n                <input type=\"checkbox\" checked={this.isNightModeEnabled()} onChange={this.handleToggleNightMode} />\r\n              </label>\r\n            </div>\r\n        </div>\r\n        <main>\r\n          <MessageBuilderScaffold\r\n            key={ProtoConvert.fullMessageDescriptorName(this.state.messageDescriptor)}\r\n            messageDescriptor={this.state.messageDescriptor}\r\n            message={this.state.message}\r\n            format={this.state.format}\r\n            builtMessage={this.state.builtMessage}\r\n            buildMessageUpToDate={this.state.messageBuildTimer === null}\r\n            storedMessages={this.state.rawStoredMessages}\r\n            callbacks={this.messageBuilderCallbacks} />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Main from './view/Main';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <Main />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}