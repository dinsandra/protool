{"version":3,"sources":["ProtoConvert.js","LocalStorage.js","view/MessageBuilder.js","view/ProtoLibrary.js","view/Main.js","index.js"],"names":["require","List","Map","protobuf","shortid","objectFromEntries","entries","o","i","length","_entries$i","Object","G_devel_Javascript_protool_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","k","v","converters","binary","messageToBinary","messageFromBinary","binary-hex","messageDescriptor","message","binaryMessage","Array","from","map","b","toString","join","toUpperCase","hexMessage","binaryMessageArray","push","parseInt","substring","Uint8Array","binary-b64","util","base64","encode","base64Message","window","atob","json","protoMessage","messageToProto","JSON","stringify","jsonMessage","parse","asUTF8","messageFromProtoMessage","json-camel","camelCaseMessage","replaceFieldNames","toObject","toJSONOptions","fieldName","camelCase","jsonCamelCaseMessage","reverseReplaceFieldNames","camelCaseFieldName","json-id","pbJsonMessage","fields","id","jsonIdsMessage","idsMessage","fieldId","converterFormats","keys","sort","converterName","format","converterExtension","convertTo","finish","replacementFunc","_ref","_ref2","newName","fieldDescriptor","resolvedType","constructor","Type","repeated","value","messageObject","messageToProtoInternal","fromObject","mapEntries","_ref3","_ref4","key","valueEntries","fieldsById","name","valueEntry","valueToProto","keyType","get","type","toArray","size","valueEntriesToProto","fieldType","console","error","Enum","convertFrom","encodedMessage","decode","data","TextDecoder","convertedMessage","convertFunc","convertedKey","findConvertedKey","options","_ref5","_ref6","_ref7","_ref8","generate","valueFromProto","values","valueEntriesFromProto","protoValue","defaultValueEntryForField","valueObject","defaultValueForFieldType","valuesById","first","fullMessageDescriptorName","parent","fromJS","isKeyed","reviver","slicedToArray","test","tryParseToInt","toMap","toList","loadJson","keyName","localStorage","getItem","log","saveJson","isEmpty","removeItem","setItem","toJSON","LocalStorage","load","save","rawStoredProtos","messages","ProtoConvert","MessageBuilderScaffold","handleSelectMessage","_this","props","callbacks","onSet","undefined","this","path","react_default","a","createElement","Fragment","MessageBuilder_StoreMessageButton","MessageBuilder_StoredMessageSelector","storedMessages","shouldSet","onSelectMessage","MessageBuilder_MessageFieldsBuilder","MessageBuilder_Output","builtMessage","buildMessageUpToDate","React","Component","StoredMessageSelector","_this2","event","target","getIn","onChange","keySeq","Output","handleExportToFile","_this3","onExport","handleChangeFormat","onSetFormat","handleFileChange","file","files","reader","FileReader","onload","fileData","result","onImport","onerror","err","readAsArrayBuffer","handleImportFromFile","refs","fileuploader","click","handleChangeBuiltMessage","split","errorMessage","defaultValue","onClick","ref","hidden","cols","rows","className","disabled","StoreMessageButton","_this4","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleStartStoring","setState","isStoring","handleCommitStore","storeName","onStore","handleDiscardStore","state","MessageFieldsBuilder","isRegularField","partOf","fieldTypeName","required","_this6","regularFieldDescriptors","filter","oneOfDescriptors","oneofs","regularFieldItems","MessageBuilder_MessageFieldValuesBuilder","concat","oneOfItems","oneOfDescriptor","MessageBuilder_MessageOneOfFieldValuesBuilder","MessageFieldValuesBuilder","_this7","messageFieldValueBuilders","index","MessageBuilder_MessageFieldValueBuilder","numEntries","MessageBuilder_MessageFieldValuesAddControls","numValueEntries","MessageFieldValuesAddControls","handleSet","_this8","onAdd","showSet","showAdd","MessageFieldValueBuilder","handleDelete","_this9","onDelete","handleDuplicate","set","handleMoveUp","onMove","handleMoveDown","showDelete","showDuplicate","showMove","enableMoveDown","enableMoveUp","MessageBuilder_MessageFieldInput","MessageOneOfFieldValuesBuilder","currentFieldDescriptor","maybeCurrentFieldId","_this10","find","newFieldId","newFieldDescriptor","maybeCurrentFieldDescriptor","fieldsArray","MessageFieldInput","MessageBuilder_MessageTextInput","MessageBuilder_MessageBytesInput","MessageBuilder_MessageIntInput","MessageBuilder_MessageFloatInput","MessageBuilder_MessageBoolInput","MessageBuilder_MessageEnumInput","MessageTextInput","handleChange","_this11","MessageBytesInput","isValid","_this12","MessageIntInput","_this13","MessageFloatInput","_this14","MessageBoolInput","_this15","checked","MessageEnumInput","_this16","_this17","ProtoLibrary","ProtoLibrary_ProtoRoot","protoRoot","ProtoLibrary_ProtoFiles","filenames","fileDependencies","ProtoLibrary_ProtoInput","ProtoLibrary_ProtoUpload","ProtoRoot","ProtoLibrary_ProtoNamespace","namespace","ProtoNamespace","handleBuild","onSelectMessageDescriptor","nested","namespaces","Namespace","types","baseName","_namespaces$","subNamespaceName","subNamespace","_types$","subMessageName","subMessage","ProtoLibrary_ProtoMessage","buildable","ProtoMessage","ProtoLibrary_StoredMessages","ProtoFiles","filename","ProtoLibrary_ProtoFile","ProtoFile","handleClick","onRemoveProto","fileDependents","importingFiles","StoredMessages","_this5","ProtoLibrary_StoredMessage","StoredMessage","handleRemove","onRemoveStoredMessage","ProtoInput","handleStartAdding","isAdding","handleSubmit","fileName","protoContent","protoText","onAddProto","ProtoUpload","text","readAsText","FileSaver","loadStoredProtos","isNode","fs","readFileSync","storedProto","Error","Root","loadSync","toJS","keepCase","flatMap","imports","importName","groupBy","importNameAndFilenames","toSet","resolveAll","Main","handleAddProto","setIn","contents","_loadStoredProtos","handleRemoveProto","delete","_loadStoredProtos2","handleSelectMessageDescriptor","messageBuildTimer","handleSetFormat","handleExportMessage","kind","extension","blob","Blob","saveAs","handleImportMessage","handleAddToMessage","updateIn","arguments","scheduleBuildMessage","handleDeleteFromMessage","listPath","pop","listKey","last","messagePath","deleteIn","handleSetInMessage","handleMoveInMessage","fromIndex","toIndex","list","movedEntry","insert","handleStoreMessage","rawStoredMessages","handleRemoveStoredMessage","prevTimeout","clearTimeout","setTimeout","libraryCallbacks","messageBuilderCallbacks","_loadStoredProtos3","prevProps","prevState","MessageBuilder","view_ProtoLibrary","ReactDOM","render","view_Main","document","getElementById"],"mappings":"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","file":"static/js/main.3e3aaf6a.chunk.js","sourcesContent":["const { List, Map } = require('immutable');\r\nconst protobuf = require(\"protobufjs\");\r\nconst shortid = require('shortid');\r\n\r\nfunction objectFromEntries(entries) {\r\n  var o = {};\r\n  for (var i = 0; i < entries.length; ++i) {\r\n    const [k, v] = entries[i];\r\n    o[k] = v\r\n  }\r\n  return o;\r\n}\r\n\r\nconst converters = {\r\n  'binary': ['Binary', 'pbdata', messageToBinary, messageFromBinary],\r\n  'binary-hex': ['Binary (hex)', 'pbdata.hex', messageToBinaryHex, messageFromBinaryHex],\r\n  'binary-b64': ['Binary (base64)', 'pbdata.b64', messageToBinaryBase64, messageFromBinaryBase64],\r\n  'json': ['Json', 'json', messageToJson, messageFromJson],\r\n  'json-camel': ['Json (camelCase)', 'cc.json', messageToJsonCamelCase, messageFromJsonCamelCase],\r\n  'json-id': ['Json (field-IDs)', 'ids.json', messageToJsonIds, messageFromJsonIds],\r\n};\r\n\r\nconst converterFormats = Object.keys(converters).sort();\r\n\r\nfunction converterName(format) {\r\n  return converters[format][0];\r\n}\r\n\r\nfunction converterExtension(format) {\r\n  return converters[format][1];\r\n}\r\n\r\nfunction convertTo(format, messageDescriptor, message) {\r\n  return converters[format][2](messageDescriptor, message);\r\n}\r\n\r\nfunction messageToBinary(messageDescriptor, message) {\r\n  const protoMessage = messageToProto(messageDescriptor, message);\r\n  return messageDescriptor.encode(protoMessage).finish();\r\n}\r\n\r\nfunction messageToBinaryHex(messageDescriptor, message) {\r\n  const binaryMessage = messageToBinary(messageDescriptor, message);\r\n  const hex = Array.from(binaryMessage).map((b) =>\r\n    ((b < 0x10) ? '0' : '') + b.toString(16)\r\n  );\r\n  return hex.join('').toUpperCase();\r\n}\r\n\r\nfunction messageToBinaryBase64(messageDescriptor, message) {\r\n  const binaryMessage = messageToBinary(messageDescriptor, message);\r\n  return protobuf.util.base64.encode(binaryMessage, 0, binaryMessage.length);\r\n}\r\n\r\nfunction messageToJson(messageDescriptor, message) {\r\n  const protoMessage = messageToProto(messageDescriptor, message);\r\n  return JSON.stringify(protoMessage);\r\n}\r\n\r\nfunction messageToJsonCamelCase(messageDescriptor, message) {\r\n  const protoMessage = messageToProto(messageDescriptor, message);\r\n  const camelCaseMessage = replaceFieldNames(\r\n    messageDescriptor,\r\n    messageDescriptor.toObject(protoMessage, protobuf.util.toJSONOptions),\r\n    (fieldName) => protobuf.util.camelCase(fieldName)\r\n  );\r\n  return JSON.stringify(camelCaseMessage);\r\n}\r\n\r\nfunction messageToJsonIds(messageDescriptor, message) {\r\n  const protoMessage = messageToProto(messageDescriptor, message);\r\n  const pbJsonMessage = replaceFieldNames(\r\n    messageDescriptor,\r\n    messageDescriptor.toObject(protoMessage, protobuf.util.toJSONOptions),\r\n    (fieldName, messageDescriptor) => messageDescriptor.fields[fieldName].id);\r\n  return JSON.stringify(pbJsonMessage);\r\n}\r\n\r\nfunction replaceFieldNames(messageDescriptor, protoMessage, replacementFunc) {\r\n  return objectFromEntries(Object.entries(protoMessage).map(([k, v]) => {\r\n    const newName = replacementFunc(k, messageDescriptor);\r\n    const fieldDescriptor = messageDescriptor.fields[k] || messageDescriptor.fields[newName];\r\n\r\n    if (fieldDescriptor.resolvedType && fieldDescriptor.resolvedType.constructor === protobuf.Type) {\r\n      if (fieldDescriptor.repeated) {\r\n        return [\r\n          newName,\r\n          v.map((value) => replaceFieldNames(fieldDescriptor.resolvedType, value, replacementFunc))\r\n        ];\r\n      } else {\r\n        return [newName, replaceFieldNames(fieldDescriptor.resolvedType, v, replacementFunc)];\r\n      }\r\n    } else {\r\n      return [newName, v];\r\n    }\r\n  }));\r\n}\r\n\r\nfunction messageToProto(messageDescriptor, message) {\r\n  const messageObject = messageToProtoInternal(messageDescriptor, message);\r\n  return messageDescriptor.fromObject(messageObject);\r\n}\r\n\r\nfunction messageToProtoInternal(messageDescriptor, message) {\r\n  return message.mapEntries(([key, valueEntries]) => {\r\n    const fieldDescriptor = messageDescriptor.fieldsById[key];\r\n    return [fieldDescriptor.name, valueEntriesToProto(fieldDescriptor, valueEntries)];\r\n  }).toObject();\r\n}\r\n\r\nfunction valueEntriesToProto(fieldDescriptor, valueEntries) {\r\n  if (fieldDescriptor.map) {\r\n    return objectFromEntries(valueEntries.map(valueEntry => [\r\n      valueToProto(fieldDescriptor.keyType, null, valueEntry.get('key')),\r\n      valueToProto(fieldDescriptor.type, fieldDescriptor.resolvedType, valueEntry.get('value')),\r\n    ]).toArray());\r\n  } else if (fieldDescriptor.repeated) {\r\n    return valueEntries.map(valueEntry =>\r\n      valueToProto(fieldDescriptor.type, fieldDescriptor.resolvedType, valueEntry.get('value'))\r\n    ).toArray();\r\n  } else if (valueEntries.size === 1) {\r\n    return valueToProto(fieldDescriptor.type, fieldDescriptor.resolvedType, valueEntries.get(0).get('value'));\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction valueToProto(fieldType, resolvedType, value) {\r\n  switch (fieldType) {\r\n    case \"string\":\r\n    case \"bytes\":\r\n    case \"int32\":\r\n    case \"int64\":\r\n    case \"sint32\":\r\n    case \"sint64\":\r\n    case \"uint32\":\r\n    case \"uint64\":\r\n    case \"fixed32\":\r\n    case \"fixed64\":\r\n    case \"float\":\r\n    case \"double\":\r\n    case \"bool\":\r\n      return value;\r\n    default:\r\n      break;\r\n  }\r\n  if (resolvedType === null) {\r\n    console.error(\"Unhandled value type\", fieldType);\r\n    return \"\";\r\n  }\r\n  if (resolvedType.constructor === protobuf.Enum) {\r\n    return value;\r\n  } else if (resolvedType.constructor === protobuf.Type) {\r\n    return messageToProtoInternal(resolvedType, value);\r\n  }\r\n  console.error(\"Unhandled value type\", fieldType);\r\n  return \"\";\r\n}\r\n\r\nfunction convertFrom(format, messageDescriptor, encodedMessage) {\r\n  return converters[format][3](messageDescriptor, encodedMessage);\r\n}\r\n\r\nfunction messageFromBinary(messageDescriptor, binaryMessage) {\r\n  const protoMessage = messageDescriptor.decode(binaryMessage);\r\n  return messageFromProtoMessage(messageDescriptor, protoMessage, {binary: true});\r\n}\r\n\r\nfunction messageFromBinaryHex(messageDescriptor, hexMessage) {\r\n  const binaryMessageArray = []\r\n  for (var i = 0; i < hexMessage.length; i += 2) {\r\n    binaryMessageArray.push(parseInt(hexMessage.substring(i, i + 2), 16));\r\n  }\r\n  return messageFromBinary(messageDescriptor, new Uint8Array(binaryMessageArray));\r\n}\r\n\r\nfunction messageFromBinaryBase64(messageDescriptor, base64Message) {\r\n  const binaryMessage = window.atob(base64Message);\r\n  return messageFromBinary(messageDescriptor, binaryMessage);\r\n}\r\n\r\nfunction asUTF8(data) {\r\n  if (data instanceof Uint8Array) {\r\n    return new TextDecoder('utf-8').decode(data);\r\n  } else {\r\n    return data;\r\n  }\r\n}\r\n\r\nfunction messageFromJson(messageDescriptor, jsonMessage) {\r\n  const protoMessage = JSON.parse(asUTF8(jsonMessage));\r\n  return messageFromProtoMessage(messageDescriptor, protoMessage);\r\n}\r\n\r\nfunction findConvertedKey(convertedKey, messageDescriptor, convertFunc) {\r\n  for (const key in messageDescriptor.fields) {\r\n    if (convertFunc(key, messageDescriptor).toString() === convertedKey) {\r\n      return key;\r\n    }\r\n  }\r\n  console.error('Failed to match key');\r\n  for (const key in messageDescriptor.fields) {\r\n    console.error('tried', convertFunc(key, messageDescriptor), '===', convertedKey);\r\n  }\r\n  console.error('all false.')\r\n}\r\n\r\nfunction reverseReplaceFieldNames(\r\n  messageDescriptor, convertedMessage, convertFunc) {\r\n    return replaceFieldNames(\r\n      messageDescriptor,\r\n      convertedMessage,\r\n      (convertedKey, messageDescriptor) => findConvertedKey(\r\n        convertedKey, messageDescriptor, convertFunc)\r\n    );\r\n  }\r\n\r\nfunction messageFromJsonCamelCase(messageDescriptor, jsonCamelCaseMessage) {\r\n  const camelCaseMessage = JSON.parse(asUTF8(jsonCamelCaseMessage));\r\n  const protoMessage = reverseReplaceFieldNames(\r\n    messageDescriptor,\r\n    camelCaseMessage,\r\n    (camelCaseFieldName) => {\r\n      return protobuf.util.camelCase(camelCaseFieldName)\r\n    }\r\n  );\r\n  return messageFromProtoMessage(messageDescriptor, protoMessage);\r\n}\r\n\r\nfunction messageFromJsonIds(messageDescriptor, jsonIdsMessage) {\r\n  const idsMessage = JSON.parse(asUTF8(jsonIdsMessage));\r\n  const protoMessage = reverseReplaceFieldNames(\r\n    messageDescriptor,\r\n    idsMessage,\r\n    (fieldId, messageDescriptor) => messageDescriptor.fields[fieldId].id\r\n  );\r\n  return messageFromProtoMessage(messageDescriptor, protoMessage);\r\n}\r\n\r\nfunction messageFromProtoMessage(messageDescriptor, protoMessage, options) {\r\n  return Map(Object.entries(protoMessage).map(([key, value]) => {\r\n    const fieldDescriptor = messageDescriptor.fields[key];\r\n    return [fieldDescriptor.id, valueEntriesFromProto(fieldDescriptor, value, options)];\r\n  }));\r\n}\r\n\r\nfunction valueEntriesFromProto(fieldDescriptor, value, options) {\r\n  if (fieldDescriptor.map) {\r\n    return List(Object.entries(value).map(([key, value]) => ({\r\n      id: shortid.generate(),\r\n      key: valueFromProto(fieldDescriptor.keyType, null, key),\r\n      value: valueFromProto(fieldDescriptor.type, fieldDescriptor.resolvedType, value),\r\n    })));\r\n  }\r\n  const values = fieldDescriptor.repeated ? value : [value];\r\n  return List(\r\n    values.map(v => (Map({\r\n      id: shortid.generate(),\r\n      value: valueFromProto(fieldDescriptor, v, options)\r\n    })))\r\n  );\r\n}\r\n\r\nfunction valueFromProto(fieldDescriptor, protoValue, options) {\r\n  switch (fieldDescriptor.type) {\r\n    case \"bytes\":\r\n    const binary = options && options.binary;\r\n      return (binary\r\n        ? protobuf.util.base64.encode(protoValue, 0, protoValue.length)\r\n        : protoValue\r\n      );\r\n\r\n    case \"string\":\r\n    case \"int32\":\r\n    case \"int64\":\r\n    case \"sint32\":\r\n    case \"sint64\":\r\n    case \"uint32\":\r\n    case \"uint64\":\r\n    case \"fixed32\":\r\n    case \"fixed64\":\r\n    case \"float\":\r\n    case \"double\":\r\n    case \"bool\":\r\n      return protoValue;\r\n    default:\r\n      break;\r\n  }\r\n  const resolvedType = fieldDescriptor.resolvedType;\r\n  if (resolvedType === null) {\r\n    console.error(\"Unhandled value type\", fieldDescriptor);\r\n    return \"\";\r\n  }\r\n  if (resolvedType.constructor === protobuf.Enum) {\r\n    return protoValue;\r\n  } else if (resolvedType.constructor === protobuf.Type) {\r\n    return messageFromProtoMessage(resolvedType, protoValue, options);\r\n  }\r\n  console.error(\"Unhandled value type\", fieldDescriptor);\r\n  return \"\";\r\n}\r\n\r\nfunction defaultValueEntryForField(fieldDescriptor) {\r\n  var valueObject = {\r\n    id: shortid.generate(),\r\n    value: defaultValueForFieldType(fieldDescriptor.type, fieldDescriptor.resolvedType)\r\n  };\r\n  if (fieldDescriptor.map) {\r\n    valueObject.key = defaultValueForFieldType(fieldDescriptor.keyType, null);\r\n  }\r\n  return Map(valueObject);\r\n}\r\n\r\nfunction defaultValueForFieldType(fieldType, resolvedType) {\r\n  switch (fieldType) {\r\n    case \"string\":\r\n    case \"bytes\":\r\n      return \"\";\r\n    case \"int32\":\r\n    case \"int64\":\r\n    case \"sint32\":\r\n    case \"sint64\":\r\n    case \"uint32\":\r\n    case \"uint64\":\r\n    case \"fixed32\":\r\n    case \"fixed64\":\r\n    case \"float\":\r\n    case \"double\":\r\n      return \"0\"\r\n    case \"bool\":\r\n      return false;\r\n    default:\r\n      break;\r\n  }\r\n  if (resolvedType === null) {\r\n    console.error(\"Unhandled default type, expected resolved type\", fieldType);\r\n    return \"\";\r\n  }\r\n  if (resolvedType.constructor === protobuf.Enum) {\r\n    return parseInt(List(Object.keys(resolvedType.valuesById)).sort().first(), 10);\r\n  } else if (resolvedType.constructor === protobuf.Type) {\r\n    return Map();\r\n  }\r\n  console.error(\"Unhandled default type\", fieldType);\r\n  return \"\";\r\n}\r\n\r\nfunction fullMessageDescriptorName(messageDescriptor) {\r\n  if (!messageDescriptor) {\r\n    return \"\";\r\n  }\r\n  var name = messageDescriptor.name;\r\n  while (messageDescriptor.parent && messageDescriptor.parent.name) {\r\n    name = messageDescriptor.parent.name + '.' + name;\r\n    messageDescriptor = messageDescriptor.parent;\r\n  }\r\n  return name;\r\n}\r\n\r\nexport {\r\n  converterFormats,\r\n  converterName,\r\n  converterExtension,\r\n  convertTo,\r\n  convertFrom,\r\n  defaultValueEntryForField,\r\n  fullMessageDescriptorName,\r\n  messageToProto\r\n};\r\n","const { fromJS, isKeyed } = require('immutable');\r\n\r\nconst tryParseToInt = v => {\r\n  if (/^[0-9]+$/.test(v)) {\r\n    return parseInt(v);\r\n  }\r\n  return v;\r\n}\r\n\r\nconst reviver = (key, value) => {\r\n  if (!isKeyed(value)) {\r\n    return value.toList();\r\n  }\r\n  return value.mapEntries(([k, v]) => [tryParseToInt(k), v]).toMap();\r\n}\r\n\r\nconst loadJson = keyName => {\r\n  const data = fromJS(\r\n    JSON.parse(window.localStorage.getItem(keyName) || \"{}\"),\r\n    reviver);\r\n  console.log('Loaded', keyName, data);\r\n  return data;\r\n}\r\n\r\nconst saveJson = (keyName, data) => {\r\n  if (data.isEmpty()) {\r\n    console.log('Removing', keyName, data);\r\n    window.localStorage.removeItem(keyName);\r\n  } else {\r\n    console.log('Saving', keyName, data);\r\n    window.localStorage.setItem(keyName, JSON.stringify(data.toJSON()));\r\n  }\r\n}\r\n\r\nconst protos = {\r\n  load: () => loadJson('stored_protos'),\r\n  save: rawStoredProtos => saveJson('stored_protos', rawStoredProtos)\r\n};\r\n\r\nconst messages = {\r\n  load: () => loadJson('stored_messages'),\r\n  save: messages => saveJson('stored_messages', messages)\r\n}\r\n\r\nconst format = {\r\n  load: () => {\r\n    return window.localStorage.getItem('format') || 'binary';\r\n  },\r\n  save: format => {\r\n    if (format === 'binary') {\r\n      window.localStorage.removeItem('format');\r\n    } else {\r\n      window.localStorage.setItem('format', format);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default {protos, messages, format};\r\n","import React from 'react';\r\nconst protobuf = require(\"protobufjs\");\r\nconst shortid = require('shortid');\r\nconst ProtoConvert = require('../ProtoConvert')\r\n\r\nconst { List, Map } = require('immutable');\r\n\r\nclass MessageBuilderScaffold extends React.Component {\r\n  handleSelectMessage = (message) => {\r\n    this.props.callbacks.onSet(List(), message);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.messageDescriptor === undefined) {\r\n      return null;\r\n    }\r\n    const path = List();\r\n    return (\r\n      <React.Fragment>\r\n        <h1>\r\n          {this.props.messageDescriptor.name} builder\r\n        </h1>\r\n        <StoreMessageButton\r\n          path={path}\r\n          messageDescriptor={this.props.messageDescriptor}\r\n          callbacks={this.props.callbacks}/>\r\n        <StoredMessageSelector\r\n          path={path}\r\n          storedMessages={this.props.storedMessages}\r\n          messageDescriptor={this.props.messageDescriptor}\r\n          shouldSet={true}\r\n          onSelectMessage={this.handleSelectMessage} />\r\n        <MessageFieldsBuilder\r\n          path={path}\r\n          storedMessages={this.props.storedMessages}\r\n          messageDescriptor={this.props.messageDescriptor}\r\n          values={this.props.message}\r\n          callbacks={this.props.callbacks} />\r\n        <Output\r\n          messageDescriptor={this.props.messageDescriptor}\r\n          format={this.props.format}\r\n          builtMessage={this.props.builtMessage}\r\n          buildMessageUpToDate={this.props.buildMessageUpToDate}\r\n          callbacks={this.props.callbacks} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass StoredMessageSelector extends React.Component {\r\n\r\n  fullMessageDescriptorName = () => ProtoConvert.fullMessageDescriptorName(\r\n    this.props.messageDescriptor);\r\n\r\n  handleSelectMessage = (event) => {\r\n    const name = event.target.value;\r\n    if (name === '') {\r\n      return;\r\n    }\r\n    const message = this.props.storedMessages.getIn(\r\n      [this.fullMessageDescriptorName(), name]);\r\n    this.props.onSelectMessage(message);\r\n    event.target.value = '';\r\n  }\r\n\r\n  render() {\r\n    const storedMessages = this.props.storedMessages.get(\r\n      this.fullMessageDescriptorName()) || Map();\r\n    if (storedMessages.isEmpty()) {\r\n      return null;\r\n    }\r\n    return (\r\n      <select onChange={this.handleSelectMessage}>\r\n        <option value=''>Stored message</option>\r\n        {storedMessages.keySeq().map((name) =>\r\n          <option key={name} value={name}>\r\n            {name}\r\n          </option>\r\n        )}\r\n      </select>\r\n    );\r\n  }\r\n}\r\n\r\nclass Output extends React.Component {\r\n  handleExportToFile = () => this.props.callbacks.onExport('file');\r\n\r\n  handleChangeFormat = (event) =>\r\n    this.props.callbacks.onSetFormat(event.target.value);\r\n\r\n  handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      const fileData = new Uint8Array(reader.result);\r\n      this.props.callbacks.onImport(fileData);\r\n    };\r\n    reader.onerror = (err) =>\r\n      console.error('FileLoading of', file, 'failed:', err);\r\n    reader.readAsArrayBuffer(file);\r\n  }\r\n\r\n  handleImportFromFile = () => this.refs.fileuploader.click();\r\n\r\n  handleChangeBuiltMessage = (event) => {\r\n    const value = this.props.format === 'binary' ? new Uint8Array(event.target.value.split(',')) : event.target.value;\r\n    this.props.callbacks.onImport(value);\r\n  }\r\n\r\n  render() {\r\n    const builtMessage = this.props.builtMessage[0]\r\n    const errorMessage = builtMessage === null ? this.props.builtMessage[1] : null;\r\n    return (\r\n      <React.Fragment>\r\n        Format:\r\n        <select\r\n          onChange={this.handleChangeFormat}\r\n          defaultValue={this.props.format}>\r\n          {ProtoConvert.converterFormats.map(key =>\r\n            <option key={key} value={key}>\r\n              {ProtoConvert.converterName(key)}\r\n            </option>\r\n          )}\r\n        </select>\r\n        <br />\r\n        import\r\n        <button onClick={this.handleImportFromFile}>Load from file</button>\r\n        <input\r\n          type=\"file\"\r\n          ref=\"fileuploader\"\r\n          onChange={this.handleFileChange}\r\n          hidden />\r\n        <br />\r\n        export\r\n        <button onClick={this.handleExportToFile}> Save as file </button>\r\n        <br/>\r\n        <textarea\r\n          value={errorMessage || builtMessage}\r\n          cols=\"200\"\r\n          rows=\"3\"\r\n          className={builtMessage === null ? \"invalid\" : \"\"}\r\n          disabled={!this.props.buildMessageUpToDate}\r\n          onChange={this.handleChangeBuiltMessage} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass StoreMessageButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isStoring: false,\r\n    }\r\n  }\r\n\r\n  handleStartStoring = () => {\r\n    this.setState({\r\n      isStoring: true\r\n    });\r\n  }\r\n\r\n  handleCommitStore = () => {\r\n    const storeName = this.refs.storeName.value;\r\n    const fullMessageDescriptorName = ProtoConvert.fullMessageDescriptorName(\r\n      this.props.messageDescriptor\r\n    );\r\n    this.props.callbacks.onStore(\r\n      this.props.path,\r\n      fullMessageDescriptorName,\r\n      storeName\r\n    );\r\n    this.setState({isStoring: false});\r\n  }\r\n\r\n  handleDiscardStore = () => {\r\n    this.setState({isStoring: false});\r\n  }\r\n\r\n  render() {\r\n    const messageDescriptor = this.props.messageDescriptor;\r\n    if (!messageDescriptor || messageDescriptor.constructor !== protobuf.Type) {\r\n      return null;\r\n    }\r\n    if (!this.state.isStoring) {\r\n      return (\r\n        <button onClick={this.handleStartStoring}>\r\n          store\r\n        </button>\r\n      );\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        Store as <input type=\"text\" ref=\"storeName\"/>\r\n        <button onClick={this.handleDiscardStore}>cancel</button>\r\n        <button onClick={this.handleCommitStore}>store</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFieldsBuilder extends React.Component {\r\n\r\n  isRegularField = fieldDescriptor => fieldDescriptor.partOf === null;\r\n\r\n  fieldTypeName = (fieldDescriptor) => {\r\n    const type = fieldDescriptor.type;\r\n    if (fieldDescriptor.map) {\r\n      const keyType = fieldDescriptor.keyType;\r\n      return 'map<' + keyType + ',' + type + '>';\r\n    }\r\n    const repeated = fieldDescriptor.repeated ? '*' : '';\r\n    const required = fieldDescriptor.required ? '!' : '';\r\n    return type + repeated + required;\r\n  }\r\n\r\n  render() {\r\n    const regularFieldDescriptors = Object\r\n      .values(this.props.messageDescriptor.fields)\r\n      .filter(this.isRegularField);\r\n    const oneOfDescriptors = Object\r\n      .values(this.props.messageDescriptor.oneofs || {});\r\n\r\n    const regularFieldItems = regularFieldDescriptors.map(fieldDescriptor =>\r\n      <li key={fieldDescriptor.name}>\r\n        <b>{this.fieldTypeName(fieldDescriptor)}</b> - {fieldDescriptor.name} = {fieldDescriptor.id}\r\n        <MessageFieldValuesBuilder\r\n          path={this.props.path.concat([fieldDescriptor.id])}\r\n          storedMessages={this.props.storedMessages}\r\n          fieldDescriptor={fieldDescriptor}\r\n          valueEntries={this.props.values.get(fieldDescriptor.id) || List()}\r\n          callbacks={this.props.callbacks} />\r\n      </li>\r\n    );\r\n\r\n    const oneOfItems = oneOfDescriptors.map(oneOfDescriptor =>\r\n      <li key={oneOfDescriptor.name}>\r\n        <b>oneof</b> {oneOfDescriptor.name}\r\n        <MessageOneOfFieldValuesBuilder\r\n          path={this.props.path}\r\n          storedMessages={this.props.storedMessages}\r\n          messageDescriptor={this.props.messageDescriptor}\r\n          oneOfDescriptor={oneOfDescriptor}\r\n          values={this.props.values}\r\n          callbacks={this.props.callbacks} />\r\n      </li>\r\n    );\r\n\r\n    return (\r\n      <ul>\r\n        {regularFieldItems}\r\n        {oneOfItems}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFieldValuesBuilder extends React.Component{\r\n  render() {\r\n    const messageFieldValueBuilders = this.props.valueEntries.map((valueEntry, index) =>\r\n      <MessageFieldValueBuilder\r\n        key={valueEntry.get('id')}\r\n        path={this.props.path}\r\n        storedMessages={this.props.storedMessages}\r\n        index={index}\r\n        numEntries={this.props.valueEntries.size}\r\n        fieldDescriptor={this.props.fieldDescriptor}\r\n        valueEntry={valueEntry}\r\n        callbacks={this.props.callbacks} />\r\n    );\r\n\r\n    return (\r\n      <ul>\r\n        {messageFieldValueBuilders}\r\n        <MessageFieldValuesAddControls\r\n          path={this.props.path}\r\n          storedMessages={this.props.storedMessages}\r\n          fieldDescriptor={this.props.fieldDescriptor}\r\n          numValueEntries={this.props.valueEntries.size}\r\n          callbacks={this.props.callbacks} />\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFieldValuesAddControls extends React.Component {\r\n  handleSet = () => {\r\n    this.props.callbacks.onAdd(\r\n      this.props.path,\r\n      ProtoConvert.defaultValueEntryForField(this.props.fieldDescriptor));\r\n  }\r\n\r\n  handleSelectMessage = (message) => {\r\n    const valueEntry = Map({\r\n      id: shortid.generate(),\r\n      value: message,\r\n    });\r\n    this.props.callbacks.onAdd(this.props.path, valueEntry);\r\n  }\r\n\r\n  render() {\r\n    const showSet = this.props.numValueEntries === 0;\r\n    const showAdd = this.props.fieldDescriptor.repeated || this.props.fieldDescriptor.map;\r\n    if (!showSet && !showAdd) {\r\n      return null;\r\n    }\r\n    return (\r\n      <li>\r\n        <button onClick={this.handleSet}> {(showAdd) ? 'add' : 'set'} </button>\r\n        <StoredMessageSelector\r\n          path={this.props.path}\r\n          storedMessages={this.props.storedMessages}\r\n          messageDescriptor={this.props.fieldDescriptor.resolvedType}\r\n          onSelectMessage={this.handleSelectMessage} />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFieldValueBuilder extends React.Component{\r\n  handleDelete = () =>\r\n    this.props.callbacks.onDelete(this.props.path.concat([this.props.index]));\r\n\r\n  handleDuplicate = () => {\r\n    this.props.callbacks.onAdd(\r\n      this.props.path,\r\n      this.props.valueEntry.set('id', shortid.generate())\r\n    );\r\n  }\r\n\r\n  handleMoveUp = () => {\r\n    this.props.callbacks.onMove(this.props.path, this.props.index, this.props.index - 1);\r\n  }\r\n\r\n  handleMoveDown = () => {\r\n    this.props.callbacks.onMove(this.props.path, this.props.index, this.props.index + 1);\r\n  }\r\n\r\n  render() {\r\n    const showDelete = this.props.fieldDescriptor.partOf === null;\r\n    const showDuplicate = this.props.fieldDescriptor.repeated || this.props.fieldDescriptor.map;\r\n    const showMove = this.props.fieldDescriptor.repeated;\r\n    const enableMoveDown = this.props.index !== this.props.numEntries - 1;\r\n    const enableMoveUp = this.props.index !== 0;\r\n    return (\r\n      <li key={this.props.valueEntry.get('id')}>\r\n        <button\r\n          onClick={this.handleDelete}\r\n          hidden={!showDelete}\r\n          className=\"tiny\">\r\n          -\r\n        </button>\r\n        <button\r\n          onClick={this.handleDuplicate}\r\n          hidden={!showDuplicate}\r\n          className=\"tiny\">\r\n          *\r\n        </button>\r\n        <button\r\n          onClick={this.handleMoveDown}\r\n          hidden={!showMove}\r\n          disabled={!enableMoveDown}\r\n          className=\"tiny\">\r\n          v\r\n        </button>\r\n        <button\r\n          onClick={this.handleMoveUp}\r\n          hidden={!showMove}\r\n          disabled={!enableMoveUp}\r\n          className=\"tiny\">\r\n          ^\r\n        </button>\r\n        <StoreMessageButton\r\n          path={this.props.path.concat([this.props.index, 'value'])}\r\n          messageDescriptor={this.props.fieldDescriptor.resolvedType}\r\n          callbacks={this.props.callbacks} />\r\n        {\r\n          this.props.fieldDescriptor.map\r\n          ? <MessageFieldInput\r\n              path={this.props.path.concat([this.props.index, 'key'])}\r\n              storedMessages={this.props.storedMessages}\r\n              fieldType={this.props.fieldDescriptor.keyType}\r\n              resolvedType={null}\r\n              value={this.props.valueEntry.get('key')}\r\n              callbacks={this.props.callbacks} />\r\n          : <React.Fragment />\r\n        }\r\n        <MessageFieldInput\r\n          path={this.props.path.concat([this.props.index, 'value'])}\r\n          storedMessages={this.props.storedMessages}\r\n          fieldType={this.props.fieldDescriptor.type}\r\n          resolvedType={this.props.fieldDescriptor.resolvedType}\r\n          value={this.props.valueEntry.get('value')}\r\n          callbacks={this.props.callbacks} />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageOneOfFieldValuesBuilder extends React.Component {\r\n\r\n  currentFieldDescriptor = () => {\r\n    const maybeCurrentFieldId = this.props.values.keySeq().find(\r\n      fieldId => this.props.messageDescriptor.fieldsById[fieldId].partOf === this.props.oneOfDescriptor);\r\n    if (maybeCurrentFieldId === undefined) {\r\n      return null;\r\n    }\r\n    return this.props.messageDescriptor.fieldsById[maybeCurrentFieldId];\r\n  }\r\n\r\n  onChange = (event) => {\r\n    const currentFieldDescriptor = this.currentFieldDescriptor();\r\n    if (currentFieldDescriptor !== null) {\r\n      this.props.callbacks.onDelete(this.props.path.concat([currentFieldDescriptor.id, 0]));\r\n    }\r\n    if (event.target.value.length !== 0) {\r\n      const newFieldId = parseInt(event.target.value, 10);\r\n      const newFieldDescriptor = this.props.messageDescriptor.fieldsById[newFieldId];\r\n      this.props.callbacks.onAdd(\r\n        this.props.path.concat([newFieldDescriptor.id]),\r\n        ProtoConvert.defaultValueEntryForField(newFieldDescriptor)\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const maybeCurrentFieldDescriptor = this.currentFieldDescriptor();\r\n    return (\r\n      <React.Fragment>\r\n        <ul>\r\n          <li>\r\n            <select\r\n              value={maybeCurrentFieldDescriptor !== null ? maybeCurrentFieldDescriptor.id : ''}\r\n              onChange={this.onChange}>\r\n              <option value={''}></option>\r\n              {this.props.oneOfDescriptor.fieldsArray.map(\r\n                (fieldDescriptor) => (\r\n                  <option\r\n                    key={fieldDescriptor.id}\r\n                    value={fieldDescriptor.id}>\r\n                    {fieldDescriptor.type} - {fieldDescriptor.name} = {fieldDescriptor.id}\r\n                  </option>\r\n                )\r\n              )}\r\n            </select>\r\n            {(maybeCurrentFieldDescriptor !== null\r\n              ? <MessageFieldValuesBuilder\r\n                  path={this.props.path.concat([maybeCurrentFieldDescriptor.id])}\r\n                  storedMessages={this.props.storedMessages}\r\n                  fieldDescriptor={maybeCurrentFieldDescriptor}\r\n                  valueEntries={this.props.values.get(maybeCurrentFieldDescriptor.id) || List()}\r\n                  callbacks={this.props.callbacks} />\r\n              : <React.Fragment />\r\n            )}\r\n          </li>\r\n        </ul>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFieldInput extends React.Component {\r\n  render() {\r\n    switch (this.props.fieldType) {\r\n      case \"string\":\r\n        return <MessageTextInput\r\n          path={this.props.path}\r\n          value={this.props.value}\r\n          callbacks={this.props.callbacks} />\r\n      case \"bytes\":\r\n        return <MessageBytesInput\r\n          path={this.props.path}\r\n          value={this.props.value}\r\n          callbacks={this.props.callbacks} />\r\n      case \"int32\":\r\n      case \"int64\":\r\n      case \"sint32\":\r\n      case \"sint64\":\r\n      case \"uint32\":\r\n      case \"uint64\":\r\n      case \"fixed32\":\r\n      case \"fixed64\":\r\n        return <MessageIntInput\r\n          path={this.props.path}\r\n          value={this.props.value}\r\n          callbacks={this.props.callbacks} />\r\n      case \"float\":\r\n      case \"double\":\r\n        return <MessageFloatInput\r\n          path={this.props.path}\r\n          value={this.props.value}\r\n          callbacks={this.props.callbacks} />\r\n      case \"bool\":\r\n        return <MessageBoolInput\r\n          path={this.props.path}\r\n          value={this.props.value}\r\n          callbacks={this.props.callbacks} />\r\n      default:\r\n        break;\r\n    }\r\n    const resolvedType = this.props.resolvedType;\r\n    if (resolvedType.constructor === protobuf.Enum) {\r\n      return <MessageEnumInput\r\n        path={this.props.path}\r\n        type={resolvedType}\r\n        value={this.props.value}\r\n        callbacks={this.props.callbacks} />\r\n    } else if (resolvedType.constructor === protobuf.Type) {\r\n      return <MessageFieldsBuilder\r\n        path={this.props.path}\r\n        storedMessages={this.props.storedMessages}\r\n        messageDescriptor={resolvedType}\r\n        values={this.props.value}\r\n        callbacks={this.props.callbacks} />\r\n    }\r\n    console.error(\"Unhandled input type\", this.props.fieldType);\r\n    return <div/>\r\n  }\r\n}\r\n\r\nclass MessageTextInput extends React.Component {\r\n  handleChange = (event) => {\r\n    // console.log('MessageTextInput change', this.props.path, event.target.value);\r\n    this.props.callbacks.onSet(this.props.path, event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return <textarea onChange={this.handleChange} value={this.props.value} />\r\n  }\r\n}\r\n\r\nclass MessageBytesInput extends React.Component {\r\n  isValid = () => protobuf.util.base64.test(this.props.value);\r\n\r\n  handleChange = (event) => {\r\n    // console.log(\"MessageBytesInput change\", this.props.path, event.target.value);\r\n    this.props.callbacks.onSet(this.props.path, event.target.value);\r\n  }\r\n\r\n  render() {\r\n    const isValid = this.isValid();\r\n    return (\r\n      <textarea\r\n        onChange={this.handleChange}\r\n        value={this.props.value}\r\n        className={isValid ? \"\" : \"invalid\"} />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nclass MessageIntInput extends React.Component {\r\n  isValid = () => /^[0-9]+$/.test(this.props.value);\r\n\r\n  handleChange = (event) => {\r\n    // console.log('MessageIntInput change', this.props.path, event.target.value);\r\n    this.props.callbacks.onSet(this.props.path, event.target.value);\r\n  }\r\n\r\n  render() {\r\n    const isValid = this.isValid();\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        onChange={this.handleChange}\r\n        value={this.props.value}\r\n        className={isValid ? \"\" : \"invalid\"} />\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageFloatInput extends React.Component {\r\n  isValid = () =>\r\n    /^[0-9]+$|^[0-9]+[.][0-9]*$|^[0-9]*[.][0-9]+$/.test(this.props.value);\r\n\r\n  handleChange = (event) => {\r\n    // console.log('MessageFloatInput change', this.props.path, event.target.value);\r\n    this.props.callbacks.onSet(this.props.path, event.target.value);\r\n  }\r\n\r\n  render() {\r\n    const isValid = this.isValid();\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        onChange={this.handleChange}\r\n        value={this.props.value}\r\n        className={isValid ? \"\" : \"invalid\"} />\r\n    );\r\n  }\r\n}\r\n\r\nclass MessageBoolInput extends React.Component {\r\n  handleChange = (event) => {\r\n    // console.log('MessageBoolInput', this.props.path, event.target.checked);\r\n    this.props.callbacks.onSet(this.props.path, event.target.checked);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={this.props.value}\r\n        onChange={this.handleChange} />\r\n    )\r\n  }\r\n}\r\n\r\nclass MessageEnumInput extends React.Component {\r\n  handleChange = (event) => {\r\n    const value = parseInt(event.target.value);\r\n    // console.log('MessageEnumInput.change', this.props.path, typeof(value), value);\r\n    this.props.callbacks.onSet(this.props.path, value);\r\n  }\r\n\r\n  render() {\r\n    const keys = List(Object.keys(this.props.type.valuesById)).sort();\r\n    return (\r\n      <select defaultValue={this.props.value} onChange={this.handleChange}>\r\n        {keys.map(key => (\r\n          <option value={key} key={key}>\r\n            {this.props.type.valuesById[key]} = {key}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessageBuilderScaffold;\r\n","import React from 'react';\r\nconst ProtoConvert =  require('../ProtoConvert');\r\nconst protobuf = require(\"protobufjs\");\r\nconst { List } = require('immutable');\r\n\r\nclass ProtoLibrary extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h2>\r\n          Known namespaces and messages\r\n        </h2>\r\n        <ProtoRoot\r\n          protoRoot={this.props.protoRoot}\r\n          storedMessages={this.props.storedMessages}\r\n          callbacks={this.props.callbacks} />\r\n        <h2>\r\n          Known files\r\n        </h2>\r\n        <ProtoFiles\r\n          filenames={this.props.filenames}\r\n          fileDependencies={this.props.fileDependencies}\r\n          callbacks={this.props.callbacks} />\r\n        <ProtoInput callbacks={this.props.callbacks} />\r\n        <ProtoUpload callbacks={this.props.callbacks} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass ProtoRoot extends React.Component {\r\n  render() {\r\n    if (!this.props.protoRoot) {\r\n      return <React.Fragment />;\r\n    }\r\n    return <ProtoNamespace\r\n      name={''}\r\n      namespace={this.props.protoRoot}\r\n      storedMessages={this.props.storedMessages}\r\n      callbacks={this.props.callbacks} />\r\n  }\r\n}\r\n\r\nclass ProtoNamespace extends React.Component {\r\n  handleBuild = () =>\r\n    this.props.callbacks.onSelectMessageDescriptor(this.props.namespace);\r\n\r\n  render() {\r\n    const nested = this.props.namespace.nested || {};\r\n    const entries = Object.entries(nested);\r\n    const namespaces = entries.filter(([k, v]) => v.constructor === protobuf.Namespace);\r\n    const types = entries.filter(([k, v]) => v.constructor === protobuf.Type);\r\n\r\n    if (this.props.namespace.constructor === protobuf.Namespace) {\r\n      const baseName = this.props.name ? this.props.name + '.' : '';\r\n      if (namespaces.length === 1 && types.length === 0) {\r\n        const [subNamespaceName, subNamespace] = namespaces[0];\r\n        return <ProtoNamespace\r\n          name={baseName + subNamespaceName}\r\n          namespace={subNamespace}\r\n          storedMessages={this.props.storedMessages}\r\n          callbacks={this.props.callbacks} />\r\n      } else if (namespaces.length === 0 && types.length === 1) {\r\n        const [subMessageName, subMessage] = types[0];\r\n        return <ProtoMessage\r\n          name={baseName + subMessageName}\r\n          message={subMessage}\r\n          storedMessages={this.props.storedMessages}\r\n          callbacks={this.props.callbacks} />;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.name}\r\n        <button\r\n          onClick={this.handleBuild}\r\n          hidden={!this.props.buildable}>\r\n          build\r\n        </button>\r\n        <ul>\r\n          {namespaces.map(([k ,v]) =>\r\n            <li key={k} >\r\n              <ProtoNamespace\r\n                name={k}\r\n                namespace={v}\r\n                storedMessages={this.props.storedMessages}\r\n                callbacks={this.props.callbacks} />\r\n            </li>\r\n          )}\r\n          {types.map(([k, v]) =>\r\n            <li key={k}>\r\n              <ProtoMessage\r\n                name={k}\r\n                message={v}\r\n                storedMessages={this.props.storedMessages}\r\n                callbacks={this.props.callbacks} />\r\n            </li>\r\n           )}\r\n        </ul>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass ProtoMessage extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ProtoNamespace\r\n          name={this.props.name}\r\n          namespace={this.props.message}\r\n          buildable={true}\r\n          storedMessages={this.props.storedMessages}\r\n          callbacks={this.props.callbacks} />\r\n        <StoredMessages\r\n          storedMessages={this.props.storedMessages}\r\n          messageDescriptor={this.props.message}\r\n          callbacks={this.props.callbacks} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass ProtoFiles extends React.Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.props.filenames.sort().map(filename =>\r\n          <li key={filename}>\r\n            <ProtoFile\r\n              filename={filename}\r\n              fileDependencies={this.props.fileDependencies}\r\n              callbacks={this.props.callbacks} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nclass ProtoFile extends React.Component {\r\n  handleClick = () => {\r\n    this.props.callbacks.onRemoveProto(this.props.filename);\r\n  }\r\n\r\n  render() {\r\n    const fileDependents = this.props.fileDependencies.get(this.props.filename, List());\r\n\r\n    const importingFiles = (fileDependents.isEmpty()\r\n      ? <React.Fragment />\r\n      : <ProtoFiles\r\n          filenames={fileDependents}\r\n          fileDependencies={this.props.fileDependencies}\r\n          callbacks={this.props.callbacks}/>);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <button\r\n          onClick={this.handleClick}\r\n          disabled={!fileDependents.isEmpty()}\r\n          className=\"tiny\">\r\n           -\r\n        </button>\r\n        {this.props.filename}\r\n        {importingFiles}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass StoredMessages extends React.Component {\r\n  render() {\r\n    const fullMessageDescriptorName = ProtoConvert.fullMessageDescriptorName(this.props.messageDescriptor)\r\n    const storedMessages = this.props.storedMessages.get(fullMessageDescriptorName);\r\n    if (!storedMessages) {\r\n      return null;\r\n    }\r\n    return (\r\n      <ul>\r\n        {storedMessages.keySeq().map(name =>\r\n          <StoredMessage\r\n            key={name}\r\n            name={name}\r\n            messageDescriptor={this.props.messageDescriptor}\r\n            callbacks={this.props.callbacks} />\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nclass StoredMessage extends React.Component {\r\n  handleRemove = (event) => {\r\n    this.props.callbacks.onRemoveStoredMessage(\r\n      ProtoConvert.fullMessageDescriptorName(this.props.messageDescriptor),\r\n      this.props.name\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <li>\r\n        <button onClick={this.handleRemove} className='tiny'>\r\n        -\r\n        </button>\r\n        {this.props.name}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nclass ProtoInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isAdding: false\r\n    }\r\n  }\r\n\r\n  handleStartAdding = () => this.setState({isAdding: true});\r\n\r\n  handleSubmit = () => {\r\n    const fileName = this.refs.fileName.value;\r\n    const protoContent = this.refs.protoText.value;\r\n    this.setState({isAdding: false});\r\n    this.props.callbacks.onAddProto(fileName, protoContent);\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isAdding) {\r\n      return <button onClick={this.handleStartAdding} > Add </button>\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        File name: <input type=\"text\" ref=\"fileName\" /> <br />\r\n        ProtoContent: <br />\r\n        <textarea ref=\"protoText\"/> <br />\r\n        <button onClick={this.handleSubmit} > Submit </button>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nclass ProtoUpload extends React.Component {\r\n  handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      const text = reader.result;\r\n      this.props.callbacks.onAddProto(file.name, text);\r\n    };\r\n    reader.onerror = (err) => {\r\n      console.error('FileLoading of', file, 'failed:', err);\r\n    };\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  handleClick = () => this.refs.fileuploader.click();\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <button onClick={this.handleClick}>\r\n          From disk\r\n        </button>\r\n        <input\r\n          type=\"file\"\r\n          ref=\"fileuploader\"\r\n          onChange={this.handleFileChange}\r\n          hidden />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProtoLibrary;\r\n","import React from 'react';\r\nimport LocalStorage from '../LocalStorage'\r\nimport MessageBuilderScaffold from './MessageBuilder';\r\nimport ProtoLibrary from './ProtoLibrary';\r\nconst ProtoConvert = require('../ProtoConvert')\r\nconst protobuf = require(\"protobufjs\");\r\nconst FileSaver = require(\"file-saver\");\r\nconst { List, Map } = require('immutable');\r\n\r\nfunction loadStoredProtos(rawStoredProtos) {\r\n  // Cheat a bit so that we can load files synchronously\r\n  protobuf.util.isNode = true;\r\n  protobuf.util.fs = {\r\n    readFileSync: (filename) => {\r\n      const storedProto = rawStoredProtos.get(filename);\r\n      if (storedProto === undefined) {\r\n        throw new Error('Needed to load unknown file: ' + filename);\r\n      }\r\n      return storedProto.get('contents');\r\n    }\r\n  };\r\n\r\n  const protoRoot = new protobuf.Root();\r\n  const filenames = rawStoredProtos.keySeq().toList();\r\n  protoRoot.loadSync(filenames.toJS(), { keepCase: true });\r\n\r\n  const importEntries = List(filenames.flatMap(filename => {\r\n    const imports = protobuf.parse(\r\n      rawStoredProtos.get(filename).get('contents')\r\n    ).imports || [];\r\n    return imports.map(importName => [importName, filename]);\r\n  }));\r\n  const groupedEntries = importEntries\r\n    .groupBy(([importName, filename]) => importName)\r\n  const mappedEntries = groupedEntries\r\n    .map(importNameAndFilenames => {\r\n      const filenames = importNameAndFilenames.map(([importName, filename]) => filename);\r\n      const filenameSet = filenames.toSet();\r\n      return filenameSet;\r\n    });\r\n  const fileDependencies = mappedEntries;\r\n\r\n  protoRoot.resolveAll();\r\n\r\n  return {protoRoot, fileDependencies};\r\n}\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      rawStoredProtos: Map(),\r\n      protoRoot: null,\r\n      fileDependencies: Map(),\r\n      rawStoredMessages: Map(),\r\n      message: Map(),\r\n      format: 'binary',\r\n      builtMessage: ['', null],\r\n    }\r\n    this.libraryCallbacks = {\r\n      onAddProto: this.handleAddProto,\r\n      onRemoveProto: this.handleRemoveProto,\r\n      onSelectMessageDescriptor: this.handleSelectMessageDescriptor,\r\n      onRemoveStoredMessage: this.handleRemoveStoredMessage,\r\n    };\r\n    this.messageBuilderCallbacks = {\r\n      onAdd: this.handleAddToMessage,\r\n      onDelete: this.handleDeleteFromMessage,\r\n      onSet: this.handleSetInMessage,\r\n      onMove: this.handleMoveInMessage,\r\n      onStore: this.handleStoreMessage,\r\n      onSetFormat: this.handleSetFormat,\r\n      onExport: this.handleExportMessage,\r\n      onImport: this.handleImportMessage,\r\n    };\r\n  }\r\n\r\n  handleAddProto = (fileName, protoContent) => {\r\n    this.setState((state) => {\r\n      const rawStoredProtos = state.rawStoredProtos.setIn([fileName], Map({contents: protoContent}));\r\n      const {protoRoot, fileDependencies} = loadStoredProtos(rawStoredProtos);\r\n      return {rawStoredProtos, protoRoot, fileDependencies};\r\n    });\r\n  }\r\n\r\n  handleRemoveProto = (fileName) => {\r\n    // console.log('handleRemoveProto', this.state.rawStoredProtos.toString());\r\n    this.setState((state) => {\r\n      const rawStoredProtos = state.rawStoredProtos.delete(fileName);\r\n      const {protoRoot, fileDependencies} = loadStoredProtos(rawStoredProtos);\r\n      return {rawStoredProtos, protoRoot, fileDependencies};\r\n    });\r\n  }\r\n\r\n  handleSelectMessageDescriptor = (messageDescriptor) => {\r\n    console.log('Setting descriptor to build:', messageDescriptor);\r\n    this.setState({\r\n      messageDescriptor,\r\n      message: Map(),\r\n      builtMessage: ['', null],\r\n      messageBuildTimer: null,\r\n    });\r\n  }\r\n\r\n  handleSetFormat = (format) => {\r\n    this.setState({\r\n      format,\r\n      builtMessage: [\r\n        ProtoConvert.convertTo(\r\n          format,\r\n          this.state.messageDescriptor,\r\n          this.state.message),\r\n        null\r\n      ],\r\n      messageBuildTimer: null,\r\n    });\r\n  }\r\n\r\n  handleExportMessage = (kind) => {\r\n    console.log('Export', this.state.format, 'to', kind);\r\n\r\n    const data = ProtoConvert.convertTo(\r\n      this.state.format,\r\n      this.state.messageDescriptor,\r\n      this.state.message);\r\n    // console.log('data', data);\r\n    console.log('handleExportMessage', this.refs);\r\n\r\n    if (kind === 'file') {\r\n      const extension = ProtoConvert.converterExtension(this.state.format);\r\n      const blob = new Blob([data], {type: 'application/octet-stream'});\r\n      FileSaver.saveAs(blob, this.state.messageDescriptor.name + '.' + extension);\r\n    } else {\r\n      console.error('Unhandled export kind:', kind);\r\n    }\r\n  }\r\n\r\n  handleImportMessage = (data) => {\r\n    console.log('Import', data.length, 'bytes as', this.state.format);\r\n    const message = ProtoConvert.convertFrom(\r\n      this.state.format,\r\n      this.state.messageDescriptor,\r\n      data\r\n    );\r\n    this.setState({\r\n      message,\r\n      builtMessage: [\r\n        ProtoConvert.convertTo(\r\n          this.state.format,\r\n          this.state.messageDescriptor,\r\n          message),\r\n        null\r\n      ],\r\n      messageBuildTimer: null,\r\n    });\r\n  }\r\n\r\n  handleAddToMessage = (path, valueEntry) => {\r\n    console.log('handleAddToMessage', this.state.message, path.toString(), valueEntry);\r\n    this.setState((state) => ({\r\n      message: state.message.updateIn(\r\n        path,\r\n        (list = List()) => list.push(valueEntry)\r\n      ),\r\n      messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\r\n    }));\r\n  }\r\n\r\n  handleDeleteFromMessage = (path) => {\r\n    // console.log('handleDeleteFromMessage', this.state.message, path.toString());\r\n    this.setState((state) => {\r\n      const listPath = path.pop();\r\n      const listKey = listPath.last();\r\n      const messagePath = listPath.pop()\r\n      const messageWithDeletedListEntry = state.message.deleteIn(path);\r\n      // Delete the whole list if the last entry is removed\r\n      const newMessage = messageWithDeletedListEntry.updateIn(\r\n        messagePath,\r\n        message => (\r\n          message.get(listKey).isEmpty()\r\n          ? message.delete(listKey)\r\n          : message));\r\n      return {\r\n        message: newMessage,\r\n        messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\r\n      };\r\n    });\r\n  }\r\n\r\n  handleSetInMessage = (path, valueEntry) => {\r\n    // console.log('handleSetInMessage', this.state.message, path, valueEntry);\r\n    this.setState((state) => ({\r\n      message: state.message.setIn(path, valueEntry),\r\n      messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\r\n    }));\r\n  }\r\n\r\n  handleMoveInMessage = (path, fromIndex, toIndex) => {\r\n    this.setState((state) => ({\r\n      message: state.message.updateIn(\r\n        path,\r\n        (list = List()) => {\r\n          const movedEntry = list.get(fromIndex);\r\n          return list.delete(fromIndex).insert(toIndex, movedEntry);\r\n        }\r\n      ),\r\n      messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\r\n    }));\r\n  }\r\n\r\n  handleStoreMessage = (path, fullMessageDescriptorName, name) => {\r\n    this.setState((state) => {\r\n      const message = state.message.getIn(path);\r\n      return {\r\n        rawStoredMessages: state.rawStoredMessages.updateIn(\r\n          [fullMessageDescriptorName],\r\n          (map = Map()) => map.set(name, message))\r\n      };\r\n    })\r\n  }\r\n\r\n  handleRemoveStoredMessage = (fullMessageDescriptorName, name) => {\r\n    this.setState((state) => {\r\n      var rawStoredMessages = state.rawStoredMessages.deleteIn(\r\n        [fullMessageDescriptorName, name]);\r\n      rawStoredMessages = rawStoredMessages.get(fullMessageDescriptorName).isEmpty()\r\n        ? rawStoredMessages.delete(fullMessageDescriptorName)\r\n        : rawStoredMessages;\r\n      console.log('handleRemoveStoredMessage', fullMessageDescriptorName, name, rawStoredMessages)\r\n      return {rawStoredMessages};\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const rawStoredProtos = LocalStorage.protos.load();\r\n    const {protoRoot, fileDependencies} = loadStoredProtos(rawStoredProtos);\r\n    const rawStoredMessages = LocalStorage.messages.load();\r\n    const format = LocalStorage.format.load();\r\n\r\n    this.setState({\r\n      rawStoredProtos,\r\n      protoRoot,\r\n      fileDependencies,\r\n      rawStoredMessages,\r\n      format,\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.rawStoredProtos !== this.state.rawStoredProtos) {\r\n      LocalStorage.protos.save(this.state.rawStoredProtos);\r\n    }\r\n    if (prevState.format !== this.state.format) {\r\n      LocalStorage.format.save(this.state.format);\r\n    }\r\n    if (prevState.rawStoredMessages !== this.state.rawStoredMessages) {\r\n      LocalStorage.messages.save(this.state.rawStoredMessages);\r\n    }\r\n  }\r\n\r\n  scheduleBuildMessage = (prevTimeout) => {\r\n    clearTimeout(prevTimeout);\r\n    return setTimeout(() =>\r\n      this.setState((state) => {\r\n        try {\r\n          return {\r\n            builtMessage: [\r\n              ProtoConvert.convertTo(\r\n                state.format,\r\n                state.messageDescriptor,\r\n                state.message),\r\n                null\r\n            ],\r\n            messageBuildTimer: null,\r\n          };\r\n        } catch (err) {\r\n          return {\r\n            builtMessage: [null, err],\r\n            messageBuildTimer: null,\r\n          }\r\n        }\r\n      }),\r\n      500\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"protool\">\r\n        <div className=\"message-builder\">\r\n          <MessageBuilderScaffold\r\n            key={ProtoConvert.fullMessageDescriptorName(this.state.messageDescriptor)}\r\n            messageDescriptor={this.state.messageDescriptor}\r\n            message={this.state.message}\r\n            format={this.state.format}\r\n            builtMessage={this.state.builtMessage}\r\n            buildMessageUpToDate={this.state.messageBuildTimer === null}\r\n            storedMessages={this.state.rawStoredMessages}\r\n            callbacks={this.messageBuilderCallbacks} />\r\n        </div>\r\n        <div className=\"proto-library\">\r\n          <ProtoLibrary\r\n            filenames={this.state.rawStoredProtos.keySeq().toList()}\r\n            fileDependencies={this.state.fileDependencies}\r\n            protoRoot={this.state.protoRoot}\r\n            storedMessages={this.state.rawStoredMessages}\r\n            callbacks={this.libraryCallbacks} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Main from './view/Main';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <Main />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}