{"version":3,"sources":["ProtoConvert.js","LocalStorage.js","view/MessageBuilder.js","view/ProtoLibrary.js","view/Main.js","index.js"],"names":["require","List","Map","protobuf","shortid","objectFromEntries","entries","o","i","length","_entries$i","Object","_Users_sandra_private_devel_js_protool_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","k","v","converters","binary","messageToBinary","messageFromBinary","binary-hex","messageDescriptor","message","binaryMessage","Array","from","map","b","toString","join","toUpperCase","hexMessage","binaryMessageArray","push","parseInt","substring","Uint8Array","binary-b64","util","base64","encode","base64Message","window","atob","json","protoMessage","messageToProto","JSON","stringify","jsonMessage","fromObject","parse","asUTF8","messageFromProtoMessage","json-camel","camelCaseMessage","replaceFieldNames","toObject","toJSONOptions","fieldName","camelCase","jsonCamelCaseMessage","reverseReplaceFieldNames","camelCaseFieldName","json-id","pbJsonMessage","fields","id","jsonIdsMessage","idsMessage","fieldId","converterFormats","keys","sort","converterName","format","converterExtension","convertTo","finish","replacementFunc","_ref","_ref2","newName","fieldDescriptor","resolvedType","constructor","Type","repeated","value","messageObject","messageToProtoInternal","mapEntries","_ref3","_ref4","key","valueEntries","fieldsById","name","valueEntry","valueToProto","keyType","get","type","toArray","size","valueEntriesToProto","fieldType","console","error","Enum","convertFrom","encodedMessage","decode","data","TextDecoder","convertedMessage","convertFunc","convertedKey","findConvertedKey","options","_ref5","_ref6","_ref7","_ref8","generate","valueFromProto","values","valueEntriesFromProto","protoValue","defaultValueEntryForField","valueObject","defaultValueForFieldType","valuesById","first","fullMessageDescriptorName","parent","fromJS","isKeyed","reviver","slicedToArray","test","tryParseToInt","toMap","toList","loadJson","keyName","localStorage","getItem","log","saveJson","isEmpty","removeItem","setItem","toJSON","LocalStorage","load","save","rawStoredProtos","messages","ProtoConvert","MessageBuilderScaffold","handleSelectMessage","_this","props","callbacks","onSet","undefined","this","path","react_default","a","createElement","Fragment","MessageBuilder_StoreMessageButton","MessageBuilder_StoredMessageSelector","storedMessages","shouldSet","onSelectMessage","MessageBuilder_MessageFieldsBuilder","MessageBuilder_Output","builtMessage","buildMessageUpToDate","React","Component","StoredMessageSelector","_this2","event","target","getIn","onChange","keySeq","Output","handleExportToFile","_this3","onExport","handleChangeFormat","onSetFormat","handleFileChange","file","files","reader","FileReader","onload","fileData","result","onImport","onerror","err","readAsArrayBuffer","handleImportFromFile","refs","fileuploader","click","handleChangeBuiltMessage","split","errorMessage","defaultValue","onClick","ref","hidden","cols","rows","className","disabled","StoreMessageButton","_this4","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleStartStoring","setState","isStoring","handleCommitStore","storeName","onStore","handleDiscardStore","state","MessageFieldsBuilder","isRegularField","partOf","fieldTypeName","required","_this6","regularFieldDescriptors","filter","oneOfDescriptors","oneofs","regularFieldItems","MessageBuilder_MessageFieldValuesBuilder","concat","oneOfItems","oneOfDescriptor","MessageBuilder_MessageOneOfFieldValuesBuilder","MessageFieldValuesBuilder","_this7","messageFieldValueBuilders","index","MessageBuilder_MessageFieldValueBuilder","numEntries","MessageBuilder_MessageFieldValuesAddControls","numValueEntries","MessageFieldValuesAddControls","handleSet","_this8","onAdd","showSet","showAdd","MessageFieldValueBuilder","handleDelete","_this9","onDelete","handleDuplicate","set","handleMoveUp","onMove","handleMoveDown","showDelete","showDuplicate","showMove","enableMoveDown","enableMoveUp","MessageBuilder_MessageFieldInput","MessageOneOfFieldValuesBuilder","currentFieldDescriptor","maybeCurrentFieldId","_this10","find","newFieldId","newFieldDescriptor","maybeCurrentFieldDescriptor","fieldsArray","MessageFieldInput","MessageBuilder_MessageTextInput","MessageBuilder_MessageBytesInput","MessageBuilder_MessageIntInput","MessageBuilder_MessageFloatInput","MessageBuilder_MessageBoolInput","MessageBuilder_MessageEnumInput","MessageTextInput","handleChange","_this11","MessageBytesInput","isValid","_this12","MessageIntInput","_this13","MessageFloatInput","_this14","MessageBoolInput","_this15","checked","MessageEnumInput","_this16","_this17","ProtoLibrary","ProtoLibrary_ProtoRoot","protoRoot","ProtoLibrary_ProtoFiles","filenames","fileDependencies","ProtoLibrary_ProtoInput","ProtoLibrary_ProtoUpload","ProtoRoot","ProtoLibrary_ProtoNamespace","namespace","ProtoNamespace","handleBuild","onSelectMessageDescriptor","nested","namespaces","Namespace","types","baseName","_namespaces$","subNamespaceName","subNamespace","_types$","subMessageName","subMessage","ProtoLibrary_ProtoMessage","buildable","ProtoMessage","ProtoLibrary_StoredMessages","ProtoFiles","filename","ProtoLibrary_ProtoFile","ProtoFile","handleClick","onRemoveProto","fileDependents","importingFiles","StoredMessages","_this5","ProtoLibrary_StoredMessage","StoredMessage","handleRemove","onRemoveStoredMessage","ProtoInput","handleStartAdding","isAdding","handleSubmit","fileName","protoContent","protoText","onAddProto","ProtoUpload","readFile","Promise","resolve","reject","text","readAsText","all","toJS","then","fileContents","multiple","FileSaver","loadStoredProtos","isNode","fs","readFileSync","storedProto","Error","Root","loadSync","keepCase","flatMap","imports","importName","groupBy","importNameAndFilenames","toSet","resolveAll","Main","handleAddProto","newFileContents","contents","mergeDeep","_loadStoredProtos","handleRemoveProto","delete","_loadStoredProtos2","handleSelectMessageDescriptor","messageBuildTimer","handleSetFormat","handleExportMessage","kind","extension","blob","Blob","saveAs","handleImportMessage","handleAddToMessage","updateIn","arguments","scheduleBuildMessage","handleDeleteFromMessage","listPath","pop","listKey","last","messagePath","deleteIn","handleSetInMessage","setIn","handleMoveInMessage","fromIndex","toIndex","list","movedEntry","insert","handleStoreMessage","rawStoredMessages","handleRemoveStoredMessage","prevTimeout","clearTimeout","setTimeout","libraryCallbacks","messageBuilderCallbacks","_loadStoredProtos3","prevProps","prevState","MessageBuilder","view_ProtoLibrary","ReactDOM","render","view_Main","document","getElementById"],"mappings":"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","file":"static/js/main.59d52285.chunk.js","sourcesContent":["const { List, Map } = require('immutable');\nconst protobuf = require(\"protobufjs\");\nconst shortid = require('shortid');\n\nfunction objectFromEntries(entries) {\n  var o = {};\n  for (var i = 0; i < entries.length; ++i) {\n    const [k, v] = entries[i];\n    o[k] = v\n  }\n  return o;\n}\n\nconst converters = {\n  'binary': ['Binary', 'pbdata', messageToBinary, messageFromBinary],\n  'binary-hex': ['Binary (hex)', 'pbdata.hex', messageToBinaryHex, messageFromBinaryHex],\n  'binary-b64': ['Binary (base64)', 'pbdata.b64', messageToBinaryBase64, messageFromBinaryBase64],\n  'json': ['Json', 'json', messageToJson, messageFromJson],\n  'json-camel': ['Json (camelCase)', 'cc.json', messageToJsonCamelCase, messageFromJsonCamelCase],\n  'json-id': ['Json (field-IDs)', 'ids.json', messageToJsonIds, messageFromJsonIds],\n};\n\nconst converterFormats = Object.keys(converters).sort();\n\nfunction converterName(format) {\n  return converters[format][0];\n}\n\nfunction converterExtension(format) {\n  return converters[format][1];\n}\n\nfunction convertTo(format, messageDescriptor, message) {\n  return converters[format][2](messageDescriptor, message);\n}\n\nfunction messageToBinary(messageDescriptor, message) {\n  const protoMessage = messageToProto(messageDescriptor, message);\n  return messageDescriptor.encode(protoMessage).finish();\n}\n\nfunction messageToBinaryHex(messageDescriptor, message) {\n  const binaryMessage = messageToBinary(messageDescriptor, message);\n  const hex = Array.from(binaryMessage).map((b) =>\n    ((b < 0x10) ? '0' : '') + b.toString(16)\n  );\n  return hex.join('').toUpperCase();\n}\n\nfunction messageToBinaryBase64(messageDescriptor, message) {\n  const binaryMessage = messageToBinary(messageDescriptor, message);\n  return protobuf.util.base64.encode(binaryMessage, 0, binaryMessage.length);\n}\n\nfunction messageToJson(messageDescriptor, message) {\n  const protoMessage = messageToProto(messageDescriptor, message);\n  return JSON.stringify(protoMessage);\n}\n\nfunction messageToJsonCamelCase(messageDescriptor, message) {\n  const protoMessage = messageToProto(messageDescriptor, message);\n  const camelCaseMessage = replaceFieldNames(\n    messageDescriptor,\n    messageDescriptor.toObject(protoMessage, protobuf.util.toJSONOptions),\n    (fieldName) => protobuf.util.camelCase(fieldName)\n  );\n  return JSON.stringify(camelCaseMessage);\n}\n\nfunction messageToJsonIds(messageDescriptor, message) {\n  const protoMessage = messageToProto(messageDescriptor, message);\n  const pbJsonMessage = replaceFieldNames(\n    messageDescriptor,\n    messageDescriptor.toObject(protoMessage, protobuf.util.toJSONOptions),\n    (fieldName, messageDescriptor) => messageDescriptor.fields[fieldName].id);\n  return JSON.stringify(pbJsonMessage);\n}\n\nfunction replaceFieldNames(messageDescriptor, protoMessage, replacementFunc) {\n  return objectFromEntries(Object.entries(protoMessage).map(([k, v]) => {\n    const newName = replacementFunc(k, messageDescriptor);\n    const fieldDescriptor = messageDescriptor.fields[k] || messageDescriptor.fields[newName];\n\n    if (fieldDescriptor.resolvedType && fieldDescriptor.resolvedType.constructor === protobuf.Type) {\n      if (fieldDescriptor.repeated) {\n        return [\n          newName,\n          v.map((value) => replaceFieldNames(fieldDescriptor.resolvedType, value, replacementFunc))\n        ];\n      } else {\n        return [newName, replaceFieldNames(fieldDescriptor.resolvedType, v, replacementFunc)];\n      }\n    } else {\n      return [newName, v];\n    }\n  }));\n}\n\nfunction messageToProto(messageDescriptor, message) {\n  const messageObject = messageToProtoInternal(messageDescriptor, message);\n  return messageDescriptor.fromObject(messageObject);\n}\n\nfunction messageToProtoInternal(messageDescriptor, message) {\n  return message.mapEntries(([key, valueEntries]) => {\n    const fieldDescriptor = messageDescriptor.fieldsById[key];\n    return [fieldDescriptor.name, valueEntriesToProto(fieldDescriptor, valueEntries)];\n  }).toObject();\n}\n\nfunction valueEntriesToProto(fieldDescriptor, valueEntries) {\n  if (fieldDescriptor.map) {\n    return objectFromEntries(valueEntries.map(valueEntry => [\n      valueToProto(fieldDescriptor.keyType, null, valueEntry.get('key')),\n      valueToProto(fieldDescriptor.type, fieldDescriptor.resolvedType, valueEntry.get('value')),\n    ]).toArray());\n  } else if (fieldDescriptor.repeated) {\n    return valueEntries.map(valueEntry =>\n      valueToProto(fieldDescriptor.type, fieldDescriptor.resolvedType, valueEntry.get('value'))\n    ).toArray();\n  } else if (valueEntries.size === 1) {\n    return valueToProto(fieldDescriptor.type, fieldDescriptor.resolvedType, valueEntries.get(0).get('value'));\n  } else {\n    return null;\n  }\n}\n\nfunction valueToProto(fieldType, resolvedType, value) {\n  switch (fieldType) {\n    case \"string\":\n    case \"bytes\":\n    case \"int32\":\n    case \"int64\":\n    case \"sint32\":\n    case \"sint64\":\n    case \"uint32\":\n    case \"uint64\":\n    case \"fixed32\":\n    case \"fixed64\":\n    case \"float\":\n    case \"double\":\n    case \"bool\":\n      return value;\n    default:\n      break;\n  }\n  if (resolvedType === null) {\n    console.error(\"Unhandled value type\", fieldType);\n    return \"\";\n  }\n  if (resolvedType.constructor === protobuf.Enum) {\n    return value;\n  } else if (resolvedType.constructor === protobuf.Type) {\n    return messageToProtoInternal(resolvedType, value);\n  }\n  console.error(\"Unhandled value type\", fieldType);\n  return \"\";\n}\n\nfunction convertFrom(format, messageDescriptor, encodedMessage) {\n  return converters[format][3](messageDescriptor, encodedMessage);\n}\n\nfunction messageFromBinary(messageDescriptor, binaryMessage) {\n  const protoMessage = messageDescriptor.decode(binaryMessage);\n  return messageFromProtoMessage(messageDescriptor, protoMessage);\n}\n\nfunction messageFromBinaryHex(messageDescriptor, hexMessage) {\n  const binaryMessageArray = []\n  for (var i = 0; i < hexMessage.length; i += 2) {\n    binaryMessageArray.push(parseInt(hexMessage.substring(i, i + 2), 16));\n  }\n  return messageFromBinary(messageDescriptor, new Uint8Array(binaryMessageArray));\n}\n\nfunction messageFromBinaryBase64(messageDescriptor, base64Message) {\n  const binaryMessage = window.atob(base64Message);\n  return messageFromBinary(messageDescriptor, binaryMessage);\n}\n\nfunction asUTF8(data) {\n  if (data instanceof Uint8Array) {\n    return new TextDecoder('utf-8').decode(data);\n  } else {\n    return data;\n  }\n}\n\nfunction messageFromJson(messageDescriptor, jsonMessage) {\n  const protoMessage = messageDescriptor.fromObject(JSON.parse(asUTF8(jsonMessage)));\n  return messageFromProtoMessage(messageDescriptor, protoMessage);\n}\n\nfunction findConvertedKey(convertedKey, messageDescriptor, convertFunc) {\n  for (const key in messageDescriptor.fields) {\n    if (convertFunc(key, messageDescriptor).toString() === convertedKey) {\n      return key;\n    }\n  }\n  console.error('Failed to match key');\n  for (const key in messageDescriptor.fields) {\n    console.error('tried', convertFunc(key, messageDescriptor), '===', convertedKey);\n  }\n  console.error('all false.')\n}\n\nfunction reverseReplaceFieldNames(\n  messageDescriptor, convertedMessage, convertFunc) {\n    return replaceFieldNames(\n      messageDescriptor,\n      convertedMessage,\n      (convertedKey, messageDescriptor) => findConvertedKey(\n        convertedKey, messageDescriptor, convertFunc)\n    );\n  }\n\nfunction messageFromJsonCamelCase(messageDescriptor, jsonCamelCaseMessage) {\n  const camelCaseMessage = JSON.parse(asUTF8(jsonCamelCaseMessage));\n  const protoMessage = messageDescriptor.fromObject(reverseReplaceFieldNames(\n    messageDescriptor,\n    camelCaseMessage,\n    (camelCaseFieldName) => {\n      return protobuf.util.camelCase(camelCaseFieldName)\n    }\n  ));\n  return messageFromProtoMessage(messageDescriptor, protoMessage);\n}\n\nfunction messageFromJsonIds(messageDescriptor, jsonIdsMessage) {\n  const idsMessage = JSON.parse(asUTF8(jsonIdsMessage));\n  const protoMessage = messageDescriptor.fromObject(reverseReplaceFieldNames(\n    messageDescriptor,\n    idsMessage,\n    (fieldId, messageDescriptor) => messageDescriptor.fields[fieldId].id\n  ));\n  return messageFromProtoMessage(messageDescriptor, protoMessage);\n}\n\nfunction messageFromProtoMessage(messageDescriptor, protoMessage, options) {\n  return Map(Object.entries(protoMessage).map(([key, value]) => {\n    const fieldDescriptor = messageDescriptor.fields[key];\n    return [fieldDescriptor.id, valueEntriesFromProto(fieldDescriptor, value, options)];\n  }));\n}\n\nfunction valueEntriesFromProto(fieldDescriptor, value, options) {\n  if (fieldDescriptor.map) {\n    return List(Object.entries(value).map(([key, value]) => ({\n      id: shortid.generate(),\n      key: valueFromProto(fieldDescriptor.keyType, null, key),\n      value: valueFromProto(fieldDescriptor.type, fieldDescriptor.resolvedType, value),\n    })));\n  }\n  const values = fieldDescriptor.repeated ? value : [value];\n  return List(\n    values.map(v => (Map({\n      id: shortid.generate(),\n      value: valueFromProto(fieldDescriptor, v, options)\n    })))\n  );\n}\n\nfunction valueFromProto(fieldDescriptor, protoValue, options) {\n  switch (fieldDescriptor.type) {\n    case \"bytes\":\n      return protobuf.util.base64.encode(protoValue, 0, protoValue.length);\n\n    case \"string\":\n    case \"int32\":\n    case \"int64\":\n    case \"sint32\":\n    case \"sint64\":\n    case \"uint32\":\n    case \"uint64\":\n    case \"fixed32\":\n    case \"fixed64\":\n    case \"float\":\n    case \"double\":\n    case \"bool\":\n      return protoValue;\n    default:\n      break;\n  }\n  const resolvedType = fieldDescriptor.resolvedType;\n  if (resolvedType === null) {\n    console.error(\"Unhandled value type\", fieldDescriptor);\n    return \"\";\n  }\n  if (resolvedType.constructor === protobuf.Enum) {\n    return protoValue;\n  } else if (resolvedType.constructor === protobuf.Type) {\n    return messageFromProtoMessage(resolvedType, protoValue, options);\n  }\n  console.error(\"Unhandled value type\", fieldDescriptor);\n  return \"\";\n}\n\nfunction defaultValueEntryForField(fieldDescriptor) {\n  var valueObject = {\n    id: shortid.generate(),\n    value: defaultValueForFieldType(fieldDescriptor.type, fieldDescriptor.resolvedType)\n  };\n  if (fieldDescriptor.map) {\n    valueObject.key = defaultValueForFieldType(fieldDescriptor.keyType, null);\n  }\n  return Map(valueObject);\n}\n\nfunction defaultValueForFieldType(fieldType, resolvedType) {\n  switch (fieldType) {\n    case \"string\":\n    case \"bytes\":\n      return \"\";\n    case \"int32\":\n    case \"int64\":\n    case \"sint32\":\n    case \"sint64\":\n    case \"uint32\":\n    case \"uint64\":\n    case \"fixed32\":\n    case \"fixed64\":\n    case \"float\":\n    case \"double\":\n      return \"0\"\n    case \"bool\":\n      return false;\n    default:\n      break;\n  }\n  if (resolvedType === null) {\n    console.error(\"Unhandled default type, expected resolved type\", fieldType);\n    return \"\";\n  }\n  if (resolvedType.constructor === protobuf.Enum) {\n    return parseInt(List(Object.keys(resolvedType.valuesById)).sort().first(), 10);\n  } else if (resolvedType.constructor === protobuf.Type) {\n    return Map();\n  }\n  console.error(\"Unhandled default type\", fieldType);\n  return \"\";\n}\n\nfunction fullMessageDescriptorName(messageDescriptor) {\n  if (!messageDescriptor) {\n    return \"\";\n  }\n  var name = messageDescriptor.name;\n  while (messageDescriptor.parent && messageDescriptor.parent.name) {\n    name = messageDescriptor.parent.name + '.' + name;\n    messageDescriptor = messageDescriptor.parent;\n  }\n  return name;\n}\n\nexport {\n  converterFormats,\n  converterName,\n  converterExtension,\n  convertTo,\n  convertFrom,\n  defaultValueEntryForField,\n  fullMessageDescriptorName,\n  messageToProto\n};\n","const { fromJS, isKeyed } = require('immutable');\n\nconst tryParseToInt = v => {\n  if (/^[0-9]+$/.test(v)) {\n    return parseInt(v);\n  }\n  return v;\n}\n\nconst reviver = (key, value) => {\n  if (!isKeyed(value)) {\n    return value.toList();\n  }\n  return value.mapEntries(([k, v]) => [tryParseToInt(k), v]).toMap();\n}\n\nconst loadJson = keyName => {\n  const data = fromJS(\n    JSON.parse(window.localStorage.getItem(keyName) || \"{}\"),\n    reviver);\n  console.log('Loaded', keyName, data);\n  return data;\n}\n\nconst saveJson = (keyName, data) => {\n  if (data.isEmpty()) {\n    console.log('Removing', keyName, data);\n    window.localStorage.removeItem(keyName);\n  } else {\n    console.log('Saving', keyName, data);\n    window.localStorage.setItem(keyName, JSON.stringify(data.toJSON()));\n  }\n}\n\nconst protos = {\n  load: () => loadJson('stored_protos'),\n  save: rawStoredProtos => saveJson('stored_protos', rawStoredProtos)\n};\n\nconst messages = {\n  load: () => loadJson('stored_messages'),\n  save: messages => saveJson('stored_messages', messages)\n}\n\nconst format = {\n  load: () => {\n    return window.localStorage.getItem('format') || 'binary';\n  },\n  save: format => {\n    if (format === 'binary') {\n      window.localStorage.removeItem('format');\n    } else {\n      window.localStorage.setItem('format', format);\n    }\n  }\n}\n\n\nexport default {protos, messages, format};\n","import React from 'react';\nconst protobuf = require(\"protobufjs\");\nconst shortid = require('shortid');\nconst ProtoConvert = require('../ProtoConvert')\n\nconst { List, Map } = require('immutable');\n\nclass MessageBuilderScaffold extends React.Component {\n  handleSelectMessage = (message) => {\n    this.props.callbacks.onSet(List(), message);\n  }\n\n  render() {\n    if (this.props.messageDescriptor === undefined) {\n      return null;\n    }\n    const path = List();\n    return (\n      <React.Fragment>\n        <h1>\n          {this.props.messageDescriptor.name} builder\n        </h1>\n        <StoreMessageButton\n          path={path}\n          messageDescriptor={this.props.messageDescriptor}\n          callbacks={this.props.callbacks}/>\n        <StoredMessageSelector\n          path={path}\n          storedMessages={this.props.storedMessages}\n          messageDescriptor={this.props.messageDescriptor}\n          shouldSet={true}\n          onSelectMessage={this.handleSelectMessage} />\n        <MessageFieldsBuilder\n          path={path}\n          storedMessages={this.props.storedMessages}\n          messageDescriptor={this.props.messageDescriptor}\n          values={this.props.message}\n          callbacks={this.props.callbacks} />\n        <Output\n          messageDescriptor={this.props.messageDescriptor}\n          format={this.props.format}\n          builtMessage={this.props.builtMessage}\n          buildMessageUpToDate={this.props.buildMessageUpToDate}\n          callbacks={this.props.callbacks} />\n      </React.Fragment>\n    );\n  }\n}\n\nclass StoredMessageSelector extends React.Component {\n\n  fullMessageDescriptorName = () => ProtoConvert.fullMessageDescriptorName(\n    this.props.messageDescriptor);\n\n  handleSelectMessage = (event) => {\n    const name = event.target.value;\n    if (name === '') {\n      return;\n    }\n    const message = this.props.storedMessages.getIn(\n      [this.fullMessageDescriptorName(), name]);\n    this.props.onSelectMessage(message);\n    event.target.value = '';\n  }\n\n  render() {\n    const storedMessages = this.props.storedMessages.get(\n      this.fullMessageDescriptorName()) || Map();\n    if (storedMessages.isEmpty()) {\n      return null;\n    }\n    return (\n      <select onChange={this.handleSelectMessage}>\n        <option value=''>Stored message</option>\n        {storedMessages.keySeq().map((name) =>\n          <option key={name} value={name}>\n            {name}\n          </option>\n        )}\n      </select>\n    );\n  }\n}\n\nclass Output extends React.Component {\n  handleExportToFile = () => this.props.callbacks.onExport('file');\n\n  handleChangeFormat = (event) =>\n    this.props.callbacks.onSetFormat(event.target.value);\n\n  handleFileChange = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      const fileData = new Uint8Array(reader.result);\n      this.props.callbacks.onImport(fileData);\n    };\n    reader.onerror = (err) =>\n      console.error('FileLoading of', file, 'failed:', err);\n    reader.readAsArrayBuffer(file);\n  }\n\n  handleImportFromFile = () => this.refs.fileuploader.click();\n\n  handleChangeBuiltMessage = (event) => {\n    const value = this.props.format === 'binary' ? new Uint8Array(event.target.value.split(',')) : event.target.value;\n    this.props.callbacks.onImport(value);\n  }\n\n  render() {\n    const builtMessage = this.props.builtMessage[0]\n    const errorMessage = builtMessage === null ? this.props.builtMessage[1] : null;\n    return (\n      <React.Fragment>\n        Format:\n        <select\n          onChange={this.handleChangeFormat}\n          defaultValue={this.props.format}>\n          {ProtoConvert.converterFormats.map(key =>\n            <option key={key} value={key}>\n              {ProtoConvert.converterName(key)}\n            </option>\n          )}\n        </select>\n        <br />\n        import\n        <button onClick={this.handleImportFromFile}>Load from file</button>\n        <input\n          type=\"file\"\n          ref=\"fileuploader\"\n          onChange={this.handleFileChange}\n          hidden />\n        <br />\n        export\n        <button onClick={this.handleExportToFile}> Save as file </button>\n        <br/>\n        <textarea\n          value={errorMessage || builtMessage}\n          cols=\"200\"\n          rows=\"3\"\n          className={builtMessage === null ? \"invalid\" : \"\"}\n          disabled={!this.props.buildMessageUpToDate}\n          onChange={this.handleChangeBuiltMessage} />\n      </React.Fragment>\n    );\n  }\n}\n\nclass StoreMessageButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isStoring: false,\n    }\n  }\n\n  handleStartStoring = () => {\n    this.setState({\n      isStoring: true\n    });\n  }\n\n  handleCommitStore = () => {\n    const storeName = this.refs.storeName.value;\n    const fullMessageDescriptorName = ProtoConvert.fullMessageDescriptorName(\n      this.props.messageDescriptor\n    );\n    this.props.callbacks.onStore(\n      this.props.path,\n      fullMessageDescriptorName,\n      storeName\n    );\n    this.setState({isStoring: false});\n  }\n\n  handleDiscardStore = () => {\n    this.setState({isStoring: false});\n  }\n\n  render() {\n    const messageDescriptor = this.props.messageDescriptor;\n    if (!messageDescriptor || messageDescriptor.constructor !== protobuf.Type) {\n      return null;\n    }\n    if (!this.state.isStoring) {\n      return (\n        <button onClick={this.handleStartStoring}>\n          store\n        </button>\n      );\n    }\n    return (\n      <React.Fragment>\n        Store as <input type=\"text\" ref=\"storeName\"/>\n        <button onClick={this.handleDiscardStore}>cancel</button>\n        <button onClick={this.handleCommitStore}>store</button>\n      </React.Fragment>\n    );\n  }\n}\n\nclass MessageFieldsBuilder extends React.Component {\n\n  isRegularField = fieldDescriptor => fieldDescriptor.partOf === null;\n\n  fieldTypeName = (fieldDescriptor) => {\n    const type = fieldDescriptor.type;\n    if (fieldDescriptor.map) {\n      const keyType = fieldDescriptor.keyType;\n      return 'map<' + keyType + ',' + type + '>';\n    }\n    const repeated = fieldDescriptor.repeated ? '*' : '';\n    const required = fieldDescriptor.required ? '!' : '';\n    return type + repeated + required;\n  }\n\n  render() {\n    const regularFieldDescriptors = Object\n      .values(this.props.messageDescriptor.fields)\n      .filter(this.isRegularField);\n    const oneOfDescriptors = Object\n      .values(this.props.messageDescriptor.oneofs || {});\n\n    const regularFieldItems = regularFieldDescriptors.map(fieldDescriptor =>\n      <li key={fieldDescriptor.name}>\n        <b>{this.fieldTypeName(fieldDescriptor)}</b> - {fieldDescriptor.name} = {fieldDescriptor.id}\n        <MessageFieldValuesBuilder\n          path={this.props.path.concat([fieldDescriptor.id])}\n          storedMessages={this.props.storedMessages}\n          fieldDescriptor={fieldDescriptor}\n          valueEntries={this.props.values.get(fieldDescriptor.id) || List()}\n          callbacks={this.props.callbacks} />\n      </li>\n    );\n\n    const oneOfItems = oneOfDescriptors.map(oneOfDescriptor =>\n      <li key={oneOfDescriptor.name}>\n        <b>oneof</b> {oneOfDescriptor.name}\n        <MessageOneOfFieldValuesBuilder\n          path={this.props.path}\n          storedMessages={this.props.storedMessages}\n          messageDescriptor={this.props.messageDescriptor}\n          oneOfDescriptor={oneOfDescriptor}\n          values={this.props.values}\n          callbacks={this.props.callbacks} />\n      </li>\n    );\n\n    return (\n      <ul>\n        {regularFieldItems}\n        {oneOfItems}\n      </ul>\n    );\n  }\n}\n\nclass MessageFieldValuesBuilder extends React.Component{\n  render() {\n    const messageFieldValueBuilders = this.props.valueEntries.map((valueEntry, index) =>\n      <MessageFieldValueBuilder\n        key={valueEntry.get('id')}\n        path={this.props.path}\n        storedMessages={this.props.storedMessages}\n        index={index}\n        numEntries={this.props.valueEntries.size}\n        fieldDescriptor={this.props.fieldDescriptor}\n        valueEntry={valueEntry}\n        callbacks={this.props.callbacks} />\n    );\n\n    return (\n      <ul>\n        {messageFieldValueBuilders}\n        <MessageFieldValuesAddControls\n          path={this.props.path}\n          storedMessages={this.props.storedMessages}\n          fieldDescriptor={this.props.fieldDescriptor}\n          numValueEntries={this.props.valueEntries.size}\n          callbacks={this.props.callbacks} />\n      </ul>\n    );\n  }\n}\n\nclass MessageFieldValuesAddControls extends React.Component {\n  handleSet = () => {\n    this.props.callbacks.onAdd(\n      this.props.path,\n      ProtoConvert.defaultValueEntryForField(this.props.fieldDescriptor));\n  }\n\n  handleSelectMessage = (message) => {\n    const valueEntry = Map({\n      id: shortid.generate(),\n      value: message,\n    });\n    this.props.callbacks.onAdd(this.props.path, valueEntry);\n  }\n\n  render() {\n    const showSet = this.props.numValueEntries === 0;\n    const showAdd = this.props.fieldDescriptor.repeated || this.props.fieldDescriptor.map;\n    if (!showSet && !showAdd) {\n      return null;\n    }\n    return (\n      <li>\n        <button onClick={this.handleSet}> {(showAdd) ? 'add' : 'set'} </button>\n        <StoredMessageSelector\n          path={this.props.path}\n          storedMessages={this.props.storedMessages}\n          messageDescriptor={this.props.fieldDescriptor.resolvedType}\n          onSelectMessage={this.handleSelectMessage} />\n      </li>\n    );\n  }\n}\n\nclass MessageFieldValueBuilder extends React.Component{\n  handleDelete = () =>\n    this.props.callbacks.onDelete(this.props.path.concat([this.props.index]));\n\n  handleDuplicate = () => {\n    this.props.callbacks.onAdd(\n      this.props.path,\n      this.props.valueEntry.set('id', shortid.generate())\n    );\n  }\n\n  handleMoveUp = () => {\n    this.props.callbacks.onMove(this.props.path, this.props.index, this.props.index - 1);\n  }\n\n  handleMoveDown = () => {\n    this.props.callbacks.onMove(this.props.path, this.props.index, this.props.index + 1);\n  }\n\n  render() {\n    const showDelete = this.props.fieldDescriptor.partOf === null;\n    const showDuplicate = this.props.fieldDescriptor.repeated || this.props.fieldDescriptor.map;\n    const showMove = this.props.fieldDescriptor.repeated;\n    const enableMoveDown = this.props.index !== this.props.numEntries - 1;\n    const enableMoveUp = this.props.index !== 0;\n    return (\n      <li key={this.props.valueEntry.get('id')}>\n        <button\n          onClick={this.handleDelete}\n          hidden={!showDelete}\n          className=\"tiny\">\n          -\n        </button>\n        <button\n          onClick={this.handleDuplicate}\n          hidden={!showDuplicate}\n          className=\"tiny\">\n          *\n        </button>\n        <button\n          onClick={this.handleMoveDown}\n          hidden={!showMove}\n          disabled={!enableMoveDown}\n          className=\"tiny\">\n          v\n        </button>\n        <button\n          onClick={this.handleMoveUp}\n          hidden={!showMove}\n          disabled={!enableMoveUp}\n          className=\"tiny\">\n          ^\n        </button>\n        <StoreMessageButton\n          path={this.props.path.concat([this.props.index, 'value'])}\n          messageDescriptor={this.props.fieldDescriptor.resolvedType}\n          callbacks={this.props.callbacks} />\n        {\n          this.props.fieldDescriptor.map\n          ? <MessageFieldInput\n              path={this.props.path.concat([this.props.index, 'key'])}\n              storedMessages={this.props.storedMessages}\n              fieldType={this.props.fieldDescriptor.keyType}\n              resolvedType={null}\n              value={this.props.valueEntry.get('key')}\n              callbacks={this.props.callbacks} />\n          : <React.Fragment />\n        }\n        <MessageFieldInput\n          path={this.props.path.concat([this.props.index, 'value'])}\n          storedMessages={this.props.storedMessages}\n          fieldType={this.props.fieldDescriptor.type}\n          resolvedType={this.props.fieldDescriptor.resolvedType}\n          value={this.props.valueEntry.get('value')}\n          callbacks={this.props.callbacks} />\n      </li>\n    );\n  }\n}\n\nclass MessageOneOfFieldValuesBuilder extends React.Component {\n\n  currentFieldDescriptor = () => {\n    const maybeCurrentFieldId = this.props.values.keySeq().find(\n      fieldId => this.props.messageDescriptor.fieldsById[fieldId].partOf === this.props.oneOfDescriptor);\n    if (maybeCurrentFieldId === undefined) {\n      return null;\n    }\n    return this.props.messageDescriptor.fieldsById[maybeCurrentFieldId];\n  }\n\n  onChange = (event) => {\n    const currentFieldDescriptor = this.currentFieldDescriptor();\n    if (currentFieldDescriptor !== null) {\n      this.props.callbacks.onDelete(this.props.path.concat([currentFieldDescriptor.id, 0]));\n    }\n    if (event.target.value.length !== 0) {\n      const newFieldId = parseInt(event.target.value, 10);\n      const newFieldDescriptor = this.props.messageDescriptor.fieldsById[newFieldId];\n      this.props.callbacks.onAdd(\n        this.props.path.concat([newFieldDescriptor.id]),\n        ProtoConvert.defaultValueEntryForField(newFieldDescriptor)\n      );\n    }\n  }\n\n  render() {\n    const maybeCurrentFieldDescriptor = this.currentFieldDescriptor();\n    return (\n      <React.Fragment>\n        <ul>\n          <li>\n            <select\n              value={maybeCurrentFieldDescriptor !== null ? maybeCurrentFieldDescriptor.id : ''}\n              onChange={this.onChange}>\n              <option value={''}></option>\n              {this.props.oneOfDescriptor.fieldsArray.map(\n                (fieldDescriptor) => (\n                  <option\n                    key={fieldDescriptor.id}\n                    value={fieldDescriptor.id}>\n                    {fieldDescriptor.type} - {fieldDescriptor.name} = {fieldDescriptor.id}\n                  </option>\n                )\n              )}\n            </select>\n            {(maybeCurrentFieldDescriptor !== null\n              ? <MessageFieldValuesBuilder\n                  path={this.props.path.concat([maybeCurrentFieldDescriptor.id])}\n                  storedMessages={this.props.storedMessages}\n                  fieldDescriptor={maybeCurrentFieldDescriptor}\n                  valueEntries={this.props.values.get(maybeCurrentFieldDescriptor.id) || List()}\n                  callbacks={this.props.callbacks} />\n              : <React.Fragment />\n            )}\n          </li>\n        </ul>\n\n      </React.Fragment>\n    );\n  }\n}\n\nclass MessageFieldInput extends React.Component {\n  render() {\n    switch (this.props.fieldType) {\n      case \"string\":\n        return <MessageTextInput\n          path={this.props.path}\n          value={this.props.value}\n          callbacks={this.props.callbacks} />\n      case \"bytes\":\n        return <MessageBytesInput\n          path={this.props.path}\n          value={this.props.value}\n          callbacks={this.props.callbacks} />\n      case \"int32\":\n      case \"int64\":\n      case \"sint32\":\n      case \"sint64\":\n      case \"uint32\":\n      case \"uint64\":\n      case \"fixed32\":\n      case \"fixed64\":\n        return <MessageIntInput\n          path={this.props.path}\n          value={this.props.value}\n          callbacks={this.props.callbacks} />\n      case \"float\":\n      case \"double\":\n        return <MessageFloatInput\n          path={this.props.path}\n          value={this.props.value}\n          callbacks={this.props.callbacks} />\n      case \"bool\":\n        return <MessageBoolInput\n          path={this.props.path}\n          value={this.props.value}\n          callbacks={this.props.callbacks} />\n      default:\n        break;\n    }\n    const resolvedType = this.props.resolvedType;\n    if (resolvedType.constructor === protobuf.Enum) {\n      return <MessageEnumInput\n        path={this.props.path}\n        type={resolvedType}\n        value={this.props.value}\n        callbacks={this.props.callbacks} />\n    } else if (resolvedType.constructor === protobuf.Type) {\n      return <MessageFieldsBuilder\n        path={this.props.path}\n        storedMessages={this.props.storedMessages}\n        messageDescriptor={resolvedType}\n        values={this.props.value}\n        callbacks={this.props.callbacks} />\n    }\n    console.error(\"Unhandled input type\", this.props.fieldType);\n    return <div/>\n  }\n}\n\nclass MessageTextInput extends React.Component {\n  handleChange = (event) => {\n    // console.log('MessageTextInput change', this.props.path, event.target.value);\n    this.props.callbacks.onSet(this.props.path, event.target.value);\n  }\n\n  render() {\n    return <textarea onChange={this.handleChange} value={this.props.value} />\n  }\n}\n\nclass MessageBytesInput extends React.Component {\n  isValid = () => protobuf.util.base64.test(this.props.value);\n\n  handleChange = (event) => {\n    // console.log(\"MessageBytesInput change\", this.props.path, event.target.value);\n    this.props.callbacks.onSet(this.props.path, event.target.value);\n  }\n\n  render() {\n    const isValid = this.isValid();\n    return (\n      <textarea\n        onChange={this.handleChange}\n        value={this.props.value}\n        className={isValid ? \"\" : \"invalid\"} />\n    );\n  }\n\n}\n\nclass MessageIntInput extends React.Component {\n  isValid = () => /^[0-9]+$/.test(this.props.value);\n\n  handleChange = (event) => {\n    // console.log('MessageIntInput change', this.props.path, event.target.value);\n    this.props.callbacks.onSet(this.props.path, event.target.value);\n  }\n\n  render() {\n    const isValid = this.isValid();\n    return (\n      <input\n        type=\"text\"\n        onChange={this.handleChange}\n        value={this.props.value}\n        className={isValid ? \"\" : \"invalid\"} />\n    );\n  }\n}\n\nclass MessageFloatInput extends React.Component {\n  isValid = () =>\n    /^[0-9]+$|^[0-9]+[.][0-9]*$|^[0-9]*[.][0-9]+$/.test(this.props.value);\n\n  handleChange = (event) => {\n    // console.log('MessageFloatInput change', this.props.path, event.target.value);\n    this.props.callbacks.onSet(this.props.path, event.target.value);\n  }\n\n  render() {\n    const isValid = this.isValid();\n    return (\n      <input\n        type=\"text\"\n        onChange={this.handleChange}\n        value={this.props.value}\n        className={isValid ? \"\" : \"invalid\"} />\n    );\n  }\n}\n\nclass MessageBoolInput extends React.Component {\n  handleChange = (event) => {\n    // console.log('MessageBoolInput', this.props.path, event.target.checked);\n    this.props.callbacks.onSet(this.props.path, event.target.checked);\n  }\n\n  render() {\n    return (\n      <input\n        type=\"checkbox\"\n        checked={this.props.value}\n        onChange={this.handleChange} />\n    )\n  }\n}\n\nclass MessageEnumInput extends React.Component {\n  handleChange = (event) => {\n    const value = parseInt(event.target.value);\n    // console.log('MessageEnumInput.change', this.props.path, typeof(value), value);\n    this.props.callbacks.onSet(this.props.path, value);\n  }\n\n  render() {\n    const keys = List(Object.keys(this.props.type.valuesById)).sort();\n    return (\n      <select defaultValue={this.props.value} onChange={this.handleChange}>\n        {keys.map(key => (\n          <option value={key} key={key}>\n            {this.props.type.valuesById[key]} = {key}\n          </option>\n        ))}\n      </select>\n    )\n  }\n}\n\nexport default MessageBuilderScaffold;\n","import React from 'react';\nconst ProtoConvert =  require('../ProtoConvert');\nconst protobuf = require(\"protobufjs\");\nconst { List, Map } = require('immutable');\n\nclass ProtoLibrary extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <h2>\n          Known namespaces and messages\n        </h2>\n        <ProtoRoot\n          protoRoot={this.props.protoRoot}\n          storedMessages={this.props.storedMessages}\n          callbacks={this.props.callbacks} />\n        <h2>\n          Known files\n        </h2>\n        <ProtoFiles\n          filenames={this.props.filenames}\n          fileDependencies={this.props.fileDependencies}\n          callbacks={this.props.callbacks} />\n        <ProtoInput callbacks={this.props.callbacks} />\n        <ProtoUpload callbacks={this.props.callbacks} />\n      </React.Fragment>\n    );\n  }\n}\n\nclass ProtoRoot extends React.Component {\n  render() {\n    if (!this.props.protoRoot) {\n      return <React.Fragment />;\n    }\n    return <ProtoNamespace\n      name={''}\n      namespace={this.props.protoRoot}\n      storedMessages={this.props.storedMessages}\n      callbacks={this.props.callbacks} />\n  }\n}\n\nclass ProtoNamespace extends React.Component {\n  handleBuild = () =>\n    this.props.callbacks.onSelectMessageDescriptor(this.props.namespace);\n\n  render() {\n    const nested = this.props.namespace.nested || {};\n    const entries = Object.entries(nested);\n    const namespaces = entries.filter(([k, v]) => v.constructor === protobuf.Namespace);\n    const types = entries.filter(([k, v]) => v.constructor === protobuf.Type);\n\n    if (this.props.namespace.constructor === protobuf.Namespace) {\n      const baseName = this.props.name ? this.props.name + '.' : '';\n      if (namespaces.length === 1 && types.length === 0) {\n        const [subNamespaceName, subNamespace] = namespaces[0];\n        return <ProtoNamespace\n          name={baseName + subNamespaceName}\n          namespace={subNamespace}\n          storedMessages={this.props.storedMessages}\n          callbacks={this.props.callbacks} />\n      } else if (namespaces.length === 0 && types.length === 1) {\n        const [subMessageName, subMessage] = types[0];\n        return <ProtoMessage\n          name={baseName + subMessageName}\n          message={subMessage}\n          storedMessages={this.props.storedMessages}\n          callbacks={this.props.callbacks} />;\n      }\n    }\n\n    return (\n      <React.Fragment>\n        {this.props.name}\n        <button\n          onClick={this.handleBuild}\n          hidden={!this.props.buildable}>\n          build\n        </button>\n        <ul>\n          {namespaces.map(([k ,v]) =>\n            <li key={k} >\n              <ProtoNamespace\n                name={k}\n                namespace={v}\n                storedMessages={this.props.storedMessages}\n                callbacks={this.props.callbacks} />\n            </li>\n          )}\n          {types.map(([k, v]) =>\n            <li key={k}>\n              <ProtoMessage\n                name={k}\n                message={v}\n                storedMessages={this.props.storedMessages}\n                callbacks={this.props.callbacks} />\n            </li>\n           )}\n        </ul>\n      </React.Fragment>\n    );\n  }\n}\n\nclass ProtoMessage extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <ProtoNamespace\n          name={this.props.name}\n          namespace={this.props.message}\n          buildable={true}\n          storedMessages={this.props.storedMessages}\n          callbacks={this.props.callbacks} />\n        <StoredMessages\n          storedMessages={this.props.storedMessages}\n          messageDescriptor={this.props.message}\n          callbacks={this.props.callbacks} />\n      </React.Fragment>\n    );\n  }\n}\n\nclass ProtoFiles extends React.Component {\n  render() {\n    return (\n      <ul>\n        {this.props.filenames.sort().map(filename =>\n          <li key={filename}>\n            <ProtoFile\n              filename={filename}\n              fileDependencies={this.props.fileDependencies}\n              callbacks={this.props.callbacks} />\n          </li>\n        )}\n      </ul>\n    );\n  }\n}\n\nclass ProtoFile extends React.Component {\n  handleClick = () => {\n    this.props.callbacks.onRemoveProto(this.props.filename);\n  }\n\n  render() {\n    const fileDependents = this.props.fileDependencies.get(this.props.filename, List());\n\n    const importingFiles = (fileDependents.isEmpty()\n      ? <React.Fragment />\n      : <ProtoFiles\n          filenames={fileDependents}\n          fileDependencies={this.props.fileDependencies}\n          callbacks={this.props.callbacks}/>);\n\n    return (\n      <React.Fragment>\n        <button\n          onClick={this.handleClick}\n          disabled={!fileDependents.isEmpty()}\n          className=\"tiny\">\n           -\n        </button>\n        {this.props.filename}\n        {importingFiles}\n      </React.Fragment>\n    );\n  }\n}\n\nclass StoredMessages extends React.Component {\n  render() {\n    const fullMessageDescriptorName = ProtoConvert.fullMessageDescriptorName(this.props.messageDescriptor)\n    const storedMessages = this.props.storedMessages.get(fullMessageDescriptorName);\n    if (!storedMessages) {\n      return null;\n    }\n    return (\n      <ul>\n        {storedMessages.keySeq().map(name =>\n          <StoredMessage\n            key={name}\n            name={name}\n            messageDescriptor={this.props.messageDescriptor}\n            callbacks={this.props.callbacks} />\n        )}\n      </ul>\n    );\n  }\n}\n\nclass StoredMessage extends React.Component {\n  handleRemove = (event) => {\n    this.props.callbacks.onRemoveStoredMessage(\n      ProtoConvert.fullMessageDescriptorName(this.props.messageDescriptor),\n      this.props.name\n    );\n  }\n\n  render() {\n    return (\n      <li>\n        <button onClick={this.handleRemove} className='tiny'>\n        -\n        </button>\n        {this.props.name}\n      </li>\n    );\n  }\n}\n\nclass ProtoInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAdding: false\n    }\n  }\n\n  handleStartAdding = () => this.setState({isAdding: true});\n\n  handleSubmit = () => {\n    const fileName = this.refs.fileName.value;\n    const protoContent = this.refs.protoText.value;\n    this.setState({isAdding: false});\n    this.props.callbacks.onAddProto(fileName, protoContent);\n  }\n\n  render() {\n    if (!this.state.isAdding) {\n      return <button onClick={this.handleStartAdding} > Add </button>\n    }\n    return (\n      <React.Fragment>\n        File name: <input type=\"text\" ref=\"fileName\" /> <br />\n        ProtoContent: <br />\n        <textarea ref=\"protoText\"/> <br />\n        <button onClick={this.handleSubmit} > Submit </button>\n      </React.Fragment>\n    )\n  }\n}\n\nclass ProtoUpload extends React.Component {\n  readFile = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const text = reader.result;\n        resolve([file.name, text]);\n      };\n      reader.onerror = (err) => {\n        reject({file, err});\n      };\n      reader.readAsText(file);\n    });\n  }\n\n  handleFileChange = (event) => {\n    Promise\n      .all(List(event.target.files).map(this.readFile).toJS())\n      .then(fileContents => {\n        this.props.callbacks.onAddProto(Map(fileContents));\n      }, (file) => console.error('FileLoading of', file, 'failed:'));\n  }\n\n  handleClick = () => this.refs.fileuploader.click();\n\n  render() {\n    return (\n      <React.Fragment>\n        <button onClick={this.handleClick}>\n          From disk\n        </button>\n        <input\n          type=\"file\"\n          ref=\"fileuploader\"\n          onChange={this.handleFileChange}\n          hidden\n          multiple />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProtoLibrary;\n","import React from 'react';\nimport LocalStorage from '../LocalStorage'\nimport MessageBuilderScaffold from './MessageBuilder';\nimport ProtoLibrary from './ProtoLibrary';\nconst ProtoConvert = require('../ProtoConvert')\nconst protobuf = require(\"protobufjs\");\nconst FileSaver = require(\"file-saver\");\nconst { List, Map } = require('immutable');\n\nfunction loadStoredProtos(rawStoredProtos) {\n  // Cheat a bit so that we can load files synchronously\n  protobuf.util.isNode = true;\n  protobuf.util.fs = {\n    readFileSync: (filename) => {\n      const storedProto = rawStoredProtos.get(filename);\n      if (storedProto === undefined) {\n        throw new Error('Needed to load unknown file: ' + filename);\n      }\n      return storedProto.get('contents');\n    }\n  };\n\n  const protoRoot = new protobuf.Root();\n  const filenames = rawStoredProtos.keySeq().toList();\n  protoRoot.loadSync(filenames.toJS(), { keepCase: true });\n\n  const importEntries = List(filenames.flatMap(filename => {\n    const imports = protobuf.parse(\n      rawStoredProtos.get(filename).get('contents')\n    ).imports || [];\n    return imports.map(importName => [importName, filename]);\n  }));\n  const groupedEntries = importEntries\n    .groupBy(([importName, filename]) => importName)\n  const mappedEntries = groupedEntries\n    .map(importNameAndFilenames => {\n      const filenames = importNameAndFilenames.map(([importName, filename]) => filename);\n      const filenameSet = filenames.toSet();\n      return filenameSet;\n    });\n  const fileDependencies = mappedEntries;\n\n  protoRoot.resolveAll();\n\n  return {protoRoot, fileDependencies};\n}\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rawStoredProtos: Map(),\n      protoRoot: null,\n      fileDependencies: Map(),\n      rawStoredMessages: Map(),\n      message: Map(),\n      format: 'binary',\n      builtMessage: ['', null],\n    }\n    this.libraryCallbacks = {\n      onAddProto: this.handleAddProto,\n      onRemoveProto: this.handleRemoveProto,\n      onSelectMessageDescriptor: this.handleSelectMessageDescriptor,\n      onRemoveStoredMessage: this.handleRemoveStoredMessage,\n    };\n    this.messageBuilderCallbacks = {\n      onAdd: this.handleAddToMessage,\n      onDelete: this.handleDeleteFromMessage,\n      onSet: this.handleSetInMessage,\n      onMove: this.handleMoveInMessage,\n      onStore: this.handleStoreMessage,\n      onSetFormat: this.handleSetFormat,\n      onExport: this.handleExportMessage,\n      onImport: this.handleImportMessage,\n    };\n  }\n\n  handleAddProto = (fileContents) => {\n    this.setState((state) => {\n      const newFileContents = fileContents.mapEntries(([filename, contents]) => {\n        return [filename, Map({contents})];\n      });\n      const rawStoredProtos = state.rawStoredProtos.mergeDeep(newFileContents);\n      const {protoRoot, fileDependencies} = loadStoredProtos(rawStoredProtos);\n      return {rawStoredProtos, protoRoot, fileDependencies};\n    });\n  }\n\n  handleRemoveProto = (fileName) => {\n    // console.log('handleRemoveProto', this.state.rawStoredProtos.toString());\n    this.setState((state) => {\n      const rawStoredProtos = state.rawStoredProtos.delete(fileName);\n      const {protoRoot, fileDependencies} = loadStoredProtos(rawStoredProtos);\n      return {rawStoredProtos, protoRoot, fileDependencies};\n    });\n  }\n\n  handleSelectMessageDescriptor = (messageDescriptor) => {\n    console.log('Setting descriptor to build:', messageDescriptor);\n    this.setState({\n      messageDescriptor,\n      message: Map(),\n      builtMessage: ['', null],\n      messageBuildTimer: null,\n    });\n  }\n\n  handleSetFormat = (format) => {\n    this.setState({\n      format,\n      builtMessage: [\n        ProtoConvert.convertTo(\n          format,\n          this.state.messageDescriptor,\n          this.state.message),\n        null\n      ],\n      messageBuildTimer: null,\n    });\n  }\n\n  handleExportMessage = (kind) => {\n    console.log('Export', this.state.format, 'to', kind);\n\n    const data = ProtoConvert.convertTo(\n      this.state.format,\n      this.state.messageDescriptor,\n      this.state.message);\n    // console.log('data', data);\n    console.log('handleExportMessage', this.refs);\n\n    if (kind === 'file') {\n      const extension = ProtoConvert.converterExtension(this.state.format);\n      const blob = new Blob([data], {type: 'application/octet-stream'});\n      FileSaver.saveAs(blob, this.state.messageDescriptor.name + '.' + extension);\n    } else {\n      console.error('Unhandled export kind:', kind);\n    }\n  }\n\n  handleImportMessage = (data) => {\n    console.log('Import', data.length, 'bytes as', this.state.format);\n    try {\n      const message = ProtoConvert.convertFrom(\n        this.state.format,\n        this.state.messageDescriptor,\n        data\n      );\n      this.setState({\n        message,\n        builtMessage: [\n          ProtoConvert.convertTo(\n            this.state.format,\n            this.state.messageDescriptor,\n            message),\n          null\n        ],\n        messageBuildTimer: null,\n      });\n    } catch (err) {\n      this.setState({builtMessage: [null, err]});\n    }\n  }\n\n  handleAddToMessage = (path, valueEntry) => {\n    console.log('handleAddToMessage', this.state.message, path.toString(), valueEntry);\n    this.setState((state) => ({\n      message: state.message.updateIn(\n        path,\n        (list = List()) => list.push(valueEntry)\n      ),\n      messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\n    }));\n  }\n\n  handleDeleteFromMessage = (path) => {\n    // console.log('handleDeleteFromMessage', this.state.message, path.toString());\n    this.setState((state) => {\n      const listPath = path.pop();\n      const listKey = listPath.last();\n      const messagePath = listPath.pop()\n      const messageWithDeletedListEntry = state.message.deleteIn(path);\n      // Delete the whole list if the last entry is removed\n      const newMessage = messageWithDeletedListEntry.updateIn(\n        messagePath,\n        message => (\n          message.get(listKey).isEmpty()\n          ? message.delete(listKey)\n          : message));\n      return {\n        message: newMessage,\n        messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\n      };\n    });\n  }\n\n  handleSetInMessage = (path, valueEntry) => {\n    // console.log('handleSetInMessage', this.state.message, path, valueEntry);\n    this.setState((state) => ({\n      message: state.message.setIn(path, valueEntry),\n      messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\n    }));\n  }\n\n  handleMoveInMessage = (path, fromIndex, toIndex) => {\n    this.setState((state) => ({\n      message: state.message.updateIn(\n        path,\n        (list = List()) => {\n          const movedEntry = list.get(fromIndex);\n          return list.delete(fromIndex).insert(toIndex, movedEntry);\n        }\n      ),\n      messageBuildTimer: this.scheduleBuildMessage(state.messageBuildTimer),\n    }));\n  }\n\n  handleStoreMessage = (path, fullMessageDescriptorName, name) => {\n    this.setState((state) => {\n      const message = state.message.getIn(path);\n      return {\n        rawStoredMessages: state.rawStoredMessages.updateIn(\n          [fullMessageDescriptorName],\n          (map = Map()) => map.set(name, message))\n      };\n    })\n  }\n\n  handleRemoveStoredMessage = (fullMessageDescriptorName, name) => {\n    this.setState((state) => {\n      var rawStoredMessages = state.rawStoredMessages.deleteIn(\n        [fullMessageDescriptorName, name]);\n      rawStoredMessages = rawStoredMessages.get(fullMessageDescriptorName).isEmpty()\n        ? rawStoredMessages.delete(fullMessageDescriptorName)\n        : rawStoredMessages;\n      console.log('handleRemoveStoredMessage', fullMessageDescriptorName, name, rawStoredMessages)\n      return {rawStoredMessages};\n    });\n  }\n\n  componentDidMount() {\n    const rawStoredProtos = LocalStorage.protos.load();\n    const {protoRoot, fileDependencies} = loadStoredProtos(rawStoredProtos);\n    const rawStoredMessages = LocalStorage.messages.load();\n    const format = LocalStorage.format.load();\n\n    this.setState({\n      rawStoredProtos,\n      protoRoot,\n      fileDependencies,\n      rawStoredMessages,\n      format,\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.rawStoredProtos !== this.state.rawStoredProtos) {\n      LocalStorage.protos.save(this.state.rawStoredProtos);\n    }\n    if (prevState.format !== this.state.format) {\n      LocalStorage.format.save(this.state.format);\n    }\n    if (prevState.rawStoredMessages !== this.state.rawStoredMessages) {\n      LocalStorage.messages.save(this.state.rawStoredMessages);\n    }\n  }\n\n  scheduleBuildMessage = (prevTimeout) => {\n    clearTimeout(prevTimeout);\n    return setTimeout(() =>\n      this.setState((state) => {\n        try {\n          return {\n            builtMessage: [\n              ProtoConvert.convertTo(\n                state.format,\n                state.messageDescriptor,\n                state.message),\n                null\n            ],\n            messageBuildTimer: null,\n          };\n        } catch (err) {\n          return {\n            builtMessage: [null, err],\n            messageBuildTimer: null,\n          }\n        }\n      }),\n      500\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"protool\">\n        <div className=\"message-builder\">\n          <MessageBuilderScaffold\n            key={ProtoConvert.fullMessageDescriptorName(this.state.messageDescriptor)}\n            messageDescriptor={this.state.messageDescriptor}\n            message={this.state.message}\n            format={this.state.format}\n            builtMessage={this.state.builtMessage}\n            buildMessageUpToDate={this.state.messageBuildTimer === null}\n            storedMessages={this.state.rawStoredMessages}\n            callbacks={this.messageBuilderCallbacks} />\n        </div>\n        <div className=\"proto-library\">\n          <ProtoLibrary\n            filenames={this.state.rawStoredProtos.keySeq().toList()}\n            fileDependencies={this.state.fileDependencies}\n            protoRoot={this.state.protoRoot}\n            storedMessages={this.state.rawStoredMessages}\n            callbacks={this.libraryCallbacks} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './view/Main';\nimport './index.css';\n\nReactDOM.render(\n  <Main />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}